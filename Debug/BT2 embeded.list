
BT2 embeded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ebc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08002fc8  08002fc8  00012fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003018  08003018  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003018  08003018  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003018  08003018  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003018  08003018  00013018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800301c  0800301c  0001301c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003020  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004984  20000014  08003034  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004998  08003034  00024998  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009de0  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d52  00000000  00000000  00029e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e8  00000000  00000000  0002bbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000790  00000000  00000000  0002c5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000178d3  00000000  00000000  0002cd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bf90  00000000  00000000  00044603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089a9a  00000000  00000000  00050593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002728  00000000  00000000  000da030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000dc758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fb0 	.word	0x08002fb0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08002fb0 	.word	0x08002fb0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fa25 	bl	80005a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f83b 	bl	80001d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f89f 	bl	800029c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015e:	f000 f873 	bl	8000248 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  queue_led_command = xQueueCreate(10, sizeof(led_command_t));
 8000162:	2200      	movs	r2, #0
 8000164:	2101      	movs	r1, #1
 8000166:	200a      	movs	r0, #10
 8000168:	f001 fc1a 	bl	80019a0 <xQueueGenericCreate>
 800016c:	4603      	mov	r3, r0
 800016e:	4a11      	ldr	r2, [pc, #68]	; (80001b4 <main+0x68>)
 8000170:	6013      	str	r3, [r2, #0]
  xTaskCreate(Usart_Task, "Usart",configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000172:	2300      	movs	r3, #0
 8000174:	9301      	str	r3, [sp, #4]
 8000176:	2301      	movs	r3, #1
 8000178:	9300      	str	r3, [sp, #0]
 800017a:	2300      	movs	r3, #0
 800017c:	2278      	movs	r2, #120	; 0x78
 800017e:	490e      	ldr	r1, [pc, #56]	; (80001b8 <main+0x6c>)
 8000180:	480e      	ldr	r0, [pc, #56]	; (80001bc <main+0x70>)
 8000182:	f001 fecb 	bl	8001f1c <xTaskCreate>
  xTaskCreate(LED_Task, "LD4_Task",configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000186:	2300      	movs	r3, #0
 8000188:	9301      	str	r3, [sp, #4]
 800018a:	2301      	movs	r3, #1
 800018c:	9300      	str	r3, [sp, #0]
 800018e:	2300      	movs	r3, #0
 8000190:	2278      	movs	r2, #120	; 0x78
 8000192:	490b      	ldr	r1, [pc, #44]	; (80001c0 <main+0x74>)
 8000194:	480b      	ldr	r0, [pc, #44]	; (80001c4 <main+0x78>)
 8000196:	f001 fec1 	bl	8001f1c <xTaskCreate>
  xTaskCreate(Switch_Task, "SW task",configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 800019a:	2300      	movs	r3, #0
 800019c:	9301      	str	r3, [sp, #4]
 800019e:	2301      	movs	r3, #1
 80001a0:	9300      	str	r3, [sp, #0]
 80001a2:	2300      	movs	r3, #0
 80001a4:	2278      	movs	r2, #120	; 0x78
 80001a6:	4908      	ldr	r1, [pc, #32]	; (80001c8 <main+0x7c>)
 80001a8:	4808      	ldr	r0, [pc, #32]	; (80001cc <main+0x80>)
 80001aa:	f001 feb7 	bl	8001f1c <xTaskCreate>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vTaskStartScheduler();
 80001ae:	f002 f825 	bl	80021fc <vTaskStartScheduler>
  while (1)
 80001b2:	e7fe      	b.n	80001b2 <main+0x66>
 80001b4:	20000030 	.word	0x20000030
 80001b8:	08002fc8 	.word	0x08002fc8
 80001bc:	08000319 	.word	0x08000319
 80001c0:	08002fd0 	.word	0x08002fd0
 80001c4:	0800033d 	.word	0x0800033d
 80001c8:	08002fdc 	.word	0x08002fdc
 80001cc:	080003a5 	.word	0x080003a5

080001d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b090      	sub	sp, #64	; 0x40
 80001d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d6:	f107 0318 	add.w	r3, r7, #24
 80001da:	2228      	movs	r2, #40	; 0x28
 80001dc:	2100      	movs	r1, #0
 80001de:	4618      	mov	r0, r3
 80001e0:	f002 feab 	bl	8002f3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2200      	movs	r2, #0
 80001e8:	601a      	str	r2, [r3, #0]
 80001ea:	605a      	str	r2, [r3, #4]
 80001ec:	609a      	str	r2, [r3, #8]
 80001ee:	60da      	str	r2, [r3, #12]
 80001f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001f2:	2302      	movs	r3, #2
 80001f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f6:	2301      	movs	r3, #1
 80001f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001fa:	2310      	movs	r3, #16
 80001fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001fe:	2300      	movs	r3, #0
 8000200:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000202:	f107 0318 	add.w	r3, r7, #24
 8000206:	4618      	mov	r0, r3
 8000208:	f000 fcdc 	bl	8000bc4 <HAL_RCC_OscConfig>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000212:	f000 f8ed 	bl	80003f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000216:	230f      	movs	r3, #15
 8000218:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800021a:	2300      	movs	r3, #0
 800021c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800021e:	2300      	movs	r3, #0
 8000220:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f000 ff4a 	bl	80010c8 <HAL_RCC_ClockConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800023a:	f000 f8d9 	bl	80003f0 <Error_Handler>
  }
}
 800023e:	bf00      	nop
 8000240:	3740      	adds	r7, #64	; 0x40
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
	...

08000248 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800024c:	4b11      	ldr	r3, [pc, #68]	; (8000294 <MX_USART1_UART_Init+0x4c>)
 800024e:	4a12      	ldr	r2, [pc, #72]	; (8000298 <MX_USART1_UART_Init+0x50>)
 8000250:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000252:	4b10      	ldr	r3, [pc, #64]	; (8000294 <MX_USART1_UART_Init+0x4c>)
 8000254:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000258:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800025a:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <MX_USART1_UART_Init+0x4c>)
 800025c:	2200      	movs	r2, #0
 800025e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000260:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <MX_USART1_UART_Init+0x4c>)
 8000262:	2200      	movs	r2, #0
 8000264:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000266:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <MX_USART1_UART_Init+0x4c>)
 8000268:	2200      	movs	r2, #0
 800026a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800026c:	4b09      	ldr	r3, [pc, #36]	; (8000294 <MX_USART1_UART_Init+0x4c>)
 800026e:	220c      	movs	r2, #12
 8000270:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000272:	4b08      	ldr	r3, [pc, #32]	; (8000294 <MX_USART1_UART_Init+0x4c>)
 8000274:	2200      	movs	r2, #0
 8000276:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <MX_USART1_UART_Init+0x4c>)
 800027a:	2200      	movs	r2, #0
 800027c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800027e:	4805      	ldr	r0, [pc, #20]	; (8000294 <MX_USART1_UART_Init+0x4c>)
 8000280:	f001 f8b0 	bl	80013e4 <HAL_UART_Init>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800028a:	f000 f8b1 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	20000040 	.word	0x20000040
 8000298:	40013800 	.word	0x40013800

0800029c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b086      	sub	sp, #24
 80002a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a2:	f107 0308 	add.w	r3, r7, #8
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b0:	4b17      	ldr	r3, [pc, #92]	; (8000310 <MX_GPIO_Init+0x74>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a16      	ldr	r2, [pc, #88]	; (8000310 <MX_GPIO_Init+0x74>)
 80002b6:	f043 0304 	orr.w	r3, r3, #4
 80002ba:	6193      	str	r3, [r2, #24]
 80002bc:	4b14      	ldr	r3, [pc, #80]	; (8000310 <MX_GPIO_Init+0x74>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f003 0304 	and.w	r3, r3, #4
 80002c4:	607b      	str	r3, [r7, #4]
 80002c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80002c8:	2200      	movs	r2, #0
 80002ca:	2102      	movs	r1, #2
 80002cc:	4811      	ldr	r0, [pc, #68]	; (8000314 <MX_GPIO_Init+0x78>)
 80002ce:	f000 fc48 	bl	8000b62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80002d2:	2301      	movs	r3, #1
 80002d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002d6:	2300      	movs	r3, #0
 80002d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002da:	2301      	movs	r3, #1
 80002dc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002de:	f107 0308 	add.w	r3, r7, #8
 80002e2:	4619      	mov	r1, r3
 80002e4:	480b      	ldr	r0, [pc, #44]	; (8000314 <MX_GPIO_Init+0x78>)
 80002e6:	f000 faa1 	bl	800082c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80002ea:	2302      	movs	r3, #2
 80002ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ee:	2301      	movs	r3, #1
 80002f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f2:	2300      	movs	r3, #0
 80002f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f6:	2302      	movs	r3, #2
 80002f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002fa:	f107 0308 	add.w	r3, r7, #8
 80002fe:	4619      	mov	r1, r3
 8000300:	4804      	ldr	r0, [pc, #16]	; (8000314 <MX_GPIO_Init+0x78>)
 8000302:	f000 fa93 	bl	800082c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000306:	bf00      	nop
 8000308:	3718      	adds	r7, #24
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40021000 	.word	0x40021000
 8000314:	40010800 	.word	0x40010800

08000318 <Usart_Task>:

/* USER CODE BEGIN 4 */
static void Usart_Task(void *pvParameters)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	uint8_t dat;
	BaseType_t	ret;
	led_command_t Led_state;
	while(1)
	{
		HAL_StatusTypeDef status = HAL_UART_Receive(&huart1, &data, 10, HAL_MAX_DELAY);
 8000320:	f04f 33ff 	mov.w	r3, #4294967295
 8000324:	220a      	movs	r2, #10
 8000326:	4903      	ldr	r1, [pc, #12]	; (8000334 <Usart_Task+0x1c>)
 8000328:	4803      	ldr	r0, [pc, #12]	; (8000338 <Usart_Task+0x20>)
 800032a:	f001 f8ab 	bl	8001484 <HAL_UART_Receive>
 800032e:	4603      	mov	r3, r0
 8000330:	73fb      	strb	r3, [r7, #15]
	{
 8000332:	e7f5      	b.n	8000320 <Usart_Task+0x8>
 8000334:	20000034 	.word	0x20000034
 8000338:	20000040 	.word	0x20000040

0800033c <LED_Task>:
	}
	vTaskDelay(1000);
}

static void LED_Task( void *pvParameters )
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	led_command_t received_led_command;
	while(1)
	{
		ret = xQueueReceive(queue_led_command, &received_led_command, 5000);
 8000344:	4b15      	ldr	r3, [pc, #84]	; (800039c <LED_Task+0x60>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f107 010b 	add.w	r1, r7, #11
 800034c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000350:	4618      	mov	r0, r3
 8000352:	f001 fc31 	bl	8001bb8 <xQueueReceive>
 8000356:	60f8      	str	r0, [r7, #12]
		if (ret == pdPASS )
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	2b01      	cmp	r3, #1
 800035c:	d118      	bne.n	8000390 <LED_Task+0x54>
		{
			if (received_led_command == LED_TOGGLE)  HAL_GPIO_TogglePin(LED_GPIO, LED_PIN);
 800035e:	7afb      	ldrb	r3, [r7, #11]
 8000360:	2b02      	cmp	r3, #2
 8000362:	d104      	bne.n	800036e <LED_Task+0x32>
 8000364:	2102      	movs	r1, #2
 8000366:	480e      	ldr	r0, [pc, #56]	; (80003a0 <LED_Task+0x64>)
 8000368:	f000 fc13 	bl	8000b92 <HAL_GPIO_TogglePin>
 800036c:	e010      	b.n	8000390 <LED_Task+0x54>
			else if (received_led_command == LED_ON) HAL_GPIO_WritePin(LED_GPIO, LED_PIN, SET);
 800036e:	7afb      	ldrb	r3, [r7, #11]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d105      	bne.n	8000380 <LED_Task+0x44>
 8000374:	2201      	movs	r2, #1
 8000376:	2102      	movs	r1, #2
 8000378:	4809      	ldr	r0, [pc, #36]	; (80003a0 <LED_Task+0x64>)
 800037a:	f000 fbf2 	bl	8000b62 <HAL_GPIO_WritePin>
 800037e:	e007      	b.n	8000390 <LED_Task+0x54>
			else if (received_led_command == LED_OFF) HAL_GPIO_WritePin(LED_GPIO, LED_PIN, RESET);
 8000380:	7afb      	ldrb	r3, [r7, #11]
 8000382:	2b01      	cmp	r3, #1
 8000384:	d104      	bne.n	8000390 <LED_Task+0x54>
 8000386:	2200      	movs	r2, #0
 8000388:	2102      	movs	r1, #2
 800038a:	4805      	ldr	r0, [pc, #20]	; (80003a0 <LED_Task+0x64>)
 800038c:	f000 fbe9 	bl	8000b62 <HAL_GPIO_WritePin>
		}
		vTaskDelay(1000);
 8000390:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000394:	f001 ff0e 	bl	80021b4 <vTaskDelay>
		ret = xQueueReceive(queue_led_command, &received_led_command, 5000);
 8000398:	e7d4      	b.n	8000344 <LED_Task+0x8>
 800039a:	bf00      	nop
 800039c:	20000030 	.word	0x20000030
 80003a0:	40010800 	.word	0x40010800

080003a4 <Switch_Task>:
	}
}

static void Switch_Task( void *pvParameters )
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	led_command_t Switch_Task_led_command;
	BaseType_t ret;
	while(1)
	{
		if (!(HAL_GPIO_ReadPin(GPIOA, BUTTON)))
 80003ac:	2101      	movs	r1, #1
 80003ae:	480e      	ldr	r0, [pc, #56]	; (80003e8 <Switch_Task+0x44>)
 80003b0:	f000 fbc0 	bl	8000b34 <HAL_GPIO_ReadPin>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d111      	bne.n	80003de <Switch_Task+0x3a>
		{
			if (HAL_GPIO_ReadPin(GPIOA, BUTTON))
 80003ba:	2101      	movs	r1, #1
 80003bc:	480a      	ldr	r0, [pc, #40]	; (80003e8 <Switch_Task+0x44>)
 80003be:	f000 fbb9 	bl	8000b34 <HAL_GPIO_ReadPin>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d00a      	beq.n	80003de <Switch_Task+0x3a>
			{
				Switch_Task_led_command = LED_TOGGLE;
 80003c8:	2302      	movs	r3, #2
 80003ca:	72fb      	strb	r3, [r7, #11]
				ret = xQueueSend(queue_led_command,&Switch_Task_led_command,0);
 80003cc:	4b07      	ldr	r3, [pc, #28]	; (80003ec <Switch_Task+0x48>)
 80003ce:	6818      	ldr	r0, [r3, #0]
 80003d0:	f107 010b 	add.w	r1, r7, #11
 80003d4:	2300      	movs	r3, #0
 80003d6:	2200      	movs	r2, #0
 80003d8:	f001 fb44 	bl	8001a64 <xQueueGenericSend>
 80003dc:	60f8      	str	r0, [r7, #12]
			}
		}
		vTaskDelay(10);
 80003de:	200a      	movs	r0, #10
 80003e0:	f001 fee8 	bl	80021b4 <vTaskDelay>
		if (!(HAL_GPIO_ReadPin(GPIOA, BUTTON)))
 80003e4:	e7e2      	b.n	80003ac <Switch_Task+0x8>
 80003e6:	bf00      	nop
 80003e8:	40010800 	.word	0x40010800
 80003ec:	20000030 	.word	0x20000030

080003f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f4:	b672      	cpsid	i
}
 80003f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <Error_Handler+0x8>
	...

080003fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000402:	4b15      	ldr	r3, [pc, #84]	; (8000458 <HAL_MspInit+0x5c>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4a14      	ldr	r2, [pc, #80]	; (8000458 <HAL_MspInit+0x5c>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	4b12      	ldr	r3, [pc, #72]	; (8000458 <HAL_MspInit+0x5c>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	60bb      	str	r3, [r7, #8]
 8000418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041a:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <HAL_MspInit+0x5c>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	4a0e      	ldr	r2, [pc, #56]	; (8000458 <HAL_MspInit+0x5c>)
 8000420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000424:	61d3      	str	r3, [r2, #28]
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <HAL_MspInit+0x5c>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000432:	4b0a      	ldr	r3, [pc, #40]	; (800045c <HAL_MspInit+0x60>)
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	4a04      	ldr	r2, [pc, #16]	; (800045c <HAL_MspInit+0x60>)
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044e:	bf00      	nop
 8000450:	3714      	adds	r7, #20
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr
 8000458:	40021000 	.word	0x40021000
 800045c:	40010000 	.word	0x40010000

08000460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b088      	sub	sp, #32
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000468:	f107 0310 	add.w	r3, r7, #16
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	609a      	str	r2, [r3, #8]
 8000474:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a1c      	ldr	r2, [pc, #112]	; (80004ec <HAL_UART_MspInit+0x8c>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d131      	bne.n	80004e4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000480:	4b1b      	ldr	r3, [pc, #108]	; (80004f0 <HAL_UART_MspInit+0x90>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	4a1a      	ldr	r2, [pc, #104]	; (80004f0 <HAL_UART_MspInit+0x90>)
 8000486:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b18      	ldr	r3, [pc, #96]	; (80004f0 <HAL_UART_MspInit+0x90>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000498:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <HAL_UART_MspInit+0x90>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a14      	ldr	r2, [pc, #80]	; (80004f0 <HAL_UART_MspInit+0x90>)
 800049e:	f043 0304 	orr.w	r3, r3, #4
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <HAL_UART_MspInit+0x90>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0304 	and.w	r3, r3, #4
 80004ac:	60bb      	str	r3, [r7, #8]
 80004ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b6:	2302      	movs	r3, #2
 80004b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ba:	2303      	movs	r3, #3
 80004bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004be:	f107 0310 	add.w	r3, r7, #16
 80004c2:	4619      	mov	r1, r3
 80004c4:	480b      	ldr	r0, [pc, #44]	; (80004f4 <HAL_UART_MspInit+0x94>)
 80004c6:	f000 f9b1 	bl	800082c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d0:	2300      	movs	r3, #0
 80004d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	2300      	movs	r3, #0
 80004d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d8:	f107 0310 	add.w	r3, r7, #16
 80004dc:	4619      	mov	r1, r3
 80004de:	4805      	ldr	r0, [pc, #20]	; (80004f4 <HAL_UART_MspInit+0x94>)
 80004e0:	f000 f9a4 	bl	800082c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004e4:	bf00      	nop
 80004e6:	3720      	adds	r7, #32
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40013800 	.word	0x40013800
 80004f0:	40021000 	.word	0x40021000
 80004f4:	40010800 	.word	0x40010800

080004f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004fc:	e7fe      	b.n	80004fc <NMI_Handler+0x4>

080004fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000502:	e7fe      	b.n	8000502 <HardFault_Handler+0x4>

08000504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000508:	e7fe      	b.n	8000508 <MemManage_Handler+0x4>

0800050a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800050e:	e7fe      	b.n	800050e <BusFault_Handler+0x4>

08000510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000514:	e7fe      	b.n	8000514 <UsageFault_Handler+0x4>

08000516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr

08000522 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000526:	bf00      	nop
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr

0800052e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr

0800053a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800053e:	f000 f875 	bl	800062c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}

08000546 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr
	...

08000554 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000554:	f7ff fff7 	bl	8000546 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000558:	480b      	ldr	r0, [pc, #44]	; (8000588 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800055a:	490c      	ldr	r1, [pc, #48]	; (800058c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800055c:	4a0c      	ldr	r2, [pc, #48]	; (8000590 <LoopFillZerobss+0x16>)
  movs r3, #0
 800055e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000560:	e002      	b.n	8000568 <LoopCopyDataInit>

08000562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000566:	3304      	adds	r3, #4

08000568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800056a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800056c:	d3f9      	bcc.n	8000562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800056e:	4a09      	ldr	r2, [pc, #36]	; (8000594 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000570:	4c09      	ldr	r4, [pc, #36]	; (8000598 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000574:	e001      	b.n	800057a <LoopFillZerobss>

08000576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000578:	3204      	adds	r2, #4

0800057a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800057a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800057c:	d3fb      	bcc.n	8000576 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800057e:	f002 fce5 	bl	8002f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000582:	f7ff fde3 	bl	800014c <main>
  bx lr
 8000586:	4770      	bx	lr
  ldr r0, =_sdata
 8000588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800058c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000590:	08003020 	.word	0x08003020
  ldr r2, =_sbss
 8000594:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000598:	20004998 	.word	0x20004998

0800059c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800059c:	e7fe      	b.n	800059c <ADC1_2_IRQHandler>
	...

080005a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <HAL_Init+0x28>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a07      	ldr	r2, [pc, #28]	; (80005c8 <HAL_Init+0x28>)
 80005aa:	f043 0310 	orr.w	r3, r3, #16
 80005ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b0:	2003      	movs	r0, #3
 80005b2:	f000 f907 	bl	80007c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005b6:	200f      	movs	r0, #15
 80005b8:	f000 f808 	bl	80005cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005bc:	f7ff ff1e 	bl	80003fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c0:	2300      	movs	r3, #0
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40022000 	.word	0x40022000

080005cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <HAL_InitTick+0x54>)
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <HAL_InitTick+0x58>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	4619      	mov	r1, r3
 80005de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f911 	bl	8000812 <HAL_SYSTICK_Config>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005f6:	2301      	movs	r3, #1
 80005f8:	e00e      	b.n	8000618 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b0f      	cmp	r3, #15
 80005fe:	d80a      	bhi.n	8000616 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000600:	2200      	movs	r2, #0
 8000602:	6879      	ldr	r1, [r7, #4]
 8000604:	f04f 30ff 	mov.w	r0, #4294967295
 8000608:	f000 f8e7 	bl	80007da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800060c:	4a06      	ldr	r2, [pc, #24]	; (8000628 <HAL_InitTick+0x5c>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000612:	2300      	movs	r3, #0
 8000614:	e000      	b.n	8000618 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000616:	2301      	movs	r3, #1
}
 8000618:	4618      	mov	r0, r3
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000000 	.word	0x20000000
 8000624:	20000008 	.word	0x20000008
 8000628:	20000004 	.word	0x20000004

0800062c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <HAL_IncTick+0x1c>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	461a      	mov	r2, r3
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <HAL_IncTick+0x20>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4413      	add	r3, r2
 800063c:	4a03      	ldr	r2, [pc, #12]	; (800064c <HAL_IncTick+0x20>)
 800063e:	6013      	str	r3, [r2, #0]
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	20000008 	.word	0x20000008
 800064c:	20000088 	.word	0x20000088

08000650 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return uwTick;
 8000654:	4b02      	ldr	r3, [pc, #8]	; (8000660 <HAL_GetTick+0x10>)
 8000656:	681b      	ldr	r3, [r3, #0]
}
 8000658:	4618      	mov	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
 8000660:	20000088 	.word	0x20000088

08000664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f003 0307 	and.w	r3, r3, #7
 8000672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000680:	4013      	ands	r3, r2
 8000682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800068c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000696:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	60d3      	str	r3, [r2, #12]
}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <__NVIC_GetPriorityGrouping+0x18>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	0a1b      	lsrs	r3, r3, #8
 80006b6:	f003 0307 	and.w	r3, r3, #7
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	6039      	str	r1, [r7, #0]
 80006d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	db0a      	blt.n	80006f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	490c      	ldr	r1, [pc, #48]	; (8000714 <__NVIC_SetPriority+0x4c>)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	0112      	lsls	r2, r2, #4
 80006e8:	b2d2      	uxtb	r2, r2
 80006ea:	440b      	add	r3, r1
 80006ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f0:	e00a      	b.n	8000708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4908      	ldr	r1, [pc, #32]	; (8000718 <__NVIC_SetPriority+0x50>)
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	f003 030f 	and.w	r3, r3, #15
 80006fe:	3b04      	subs	r3, #4
 8000700:	0112      	lsls	r2, r2, #4
 8000702:	b2d2      	uxtb	r2, r2
 8000704:	440b      	add	r3, r1
 8000706:	761a      	strb	r2, [r3, #24]
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000e100 	.word	0xe000e100
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800071c:	b480      	push	{r7}
 800071e:	b089      	sub	sp, #36	; 0x24
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f003 0307 	and.w	r3, r3, #7
 800072e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000730:	69fb      	ldr	r3, [r7, #28]
 8000732:	f1c3 0307 	rsb	r3, r3, #7
 8000736:	2b04      	cmp	r3, #4
 8000738:	bf28      	it	cs
 800073a:	2304      	movcs	r3, #4
 800073c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	3304      	adds	r3, #4
 8000742:	2b06      	cmp	r3, #6
 8000744:	d902      	bls.n	800074c <NVIC_EncodePriority+0x30>
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3b03      	subs	r3, #3
 800074a:	e000      	b.n	800074e <NVIC_EncodePriority+0x32>
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000750:	f04f 32ff 	mov.w	r2, #4294967295
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	fa02 f303 	lsl.w	r3, r2, r3
 800075a:	43da      	mvns	r2, r3
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	401a      	ands	r2, r3
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000764:	f04f 31ff 	mov.w	r1, #4294967295
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	fa01 f303 	lsl.w	r3, r1, r3
 800076e:	43d9      	mvns	r1, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000774:	4313      	orrs	r3, r2
         );
}
 8000776:	4618      	mov	r0, r3
 8000778:	3724      	adds	r7, #36	; 0x24
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr

08000780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3b01      	subs	r3, #1
 800078c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000790:	d301      	bcc.n	8000796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000792:	2301      	movs	r3, #1
 8000794:	e00f      	b.n	80007b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000796:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <SysTick_Config+0x40>)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3b01      	subs	r3, #1
 800079c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800079e:	210f      	movs	r1, #15
 80007a0:	f04f 30ff 	mov.w	r0, #4294967295
 80007a4:	f7ff ff90 	bl	80006c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <SysTick_Config+0x40>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ae:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <SysTick_Config+0x40>)
 80007b0:	2207      	movs	r2, #7
 80007b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007b4:	2300      	movs	r3, #0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	e000e010 	.word	0xe000e010

080007c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff ff49 	bl	8000664 <__NVIC_SetPriorityGrouping>
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007da:	b580      	push	{r7, lr}
 80007dc:	b086      	sub	sp, #24
 80007de:	af00      	add	r7, sp, #0
 80007e0:	4603      	mov	r3, r0
 80007e2:	60b9      	str	r1, [r7, #8]
 80007e4:	607a      	str	r2, [r7, #4]
 80007e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007ec:	f7ff ff5e 	bl	80006ac <__NVIC_GetPriorityGrouping>
 80007f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	68b9      	ldr	r1, [r7, #8]
 80007f6:	6978      	ldr	r0, [r7, #20]
 80007f8:	f7ff ff90 	bl	800071c <NVIC_EncodePriority>
 80007fc:	4602      	mov	r2, r0
 80007fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000802:	4611      	mov	r1, r2
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff5f 	bl	80006c8 <__NVIC_SetPriority>
}
 800080a:	bf00      	nop
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b082      	sub	sp, #8
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff ffb0 	bl	8000780 <SysTick_Config>
 8000820:	4603      	mov	r3, r0
}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800082c:	b480      	push	{r7}
 800082e:	b08b      	sub	sp, #44	; 0x2c
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800083a:	2300      	movs	r3, #0
 800083c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800083e:	e169      	b.n	8000b14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000840:	2201      	movs	r2, #1
 8000842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000844:	fa02 f303 	lsl.w	r3, r2, r3
 8000848:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	69fa      	ldr	r2, [r7, #28]
 8000850:	4013      	ands	r3, r2
 8000852:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000854:	69ba      	ldr	r2, [r7, #24]
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	429a      	cmp	r2, r3
 800085a:	f040 8158 	bne.w	8000b0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	4a9a      	ldr	r2, [pc, #616]	; (8000acc <HAL_GPIO_Init+0x2a0>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d05e      	beq.n	8000926 <HAL_GPIO_Init+0xfa>
 8000868:	4a98      	ldr	r2, [pc, #608]	; (8000acc <HAL_GPIO_Init+0x2a0>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d875      	bhi.n	800095a <HAL_GPIO_Init+0x12e>
 800086e:	4a98      	ldr	r2, [pc, #608]	; (8000ad0 <HAL_GPIO_Init+0x2a4>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d058      	beq.n	8000926 <HAL_GPIO_Init+0xfa>
 8000874:	4a96      	ldr	r2, [pc, #600]	; (8000ad0 <HAL_GPIO_Init+0x2a4>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d86f      	bhi.n	800095a <HAL_GPIO_Init+0x12e>
 800087a:	4a96      	ldr	r2, [pc, #600]	; (8000ad4 <HAL_GPIO_Init+0x2a8>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d052      	beq.n	8000926 <HAL_GPIO_Init+0xfa>
 8000880:	4a94      	ldr	r2, [pc, #592]	; (8000ad4 <HAL_GPIO_Init+0x2a8>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d869      	bhi.n	800095a <HAL_GPIO_Init+0x12e>
 8000886:	4a94      	ldr	r2, [pc, #592]	; (8000ad8 <HAL_GPIO_Init+0x2ac>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d04c      	beq.n	8000926 <HAL_GPIO_Init+0xfa>
 800088c:	4a92      	ldr	r2, [pc, #584]	; (8000ad8 <HAL_GPIO_Init+0x2ac>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d863      	bhi.n	800095a <HAL_GPIO_Init+0x12e>
 8000892:	4a92      	ldr	r2, [pc, #584]	; (8000adc <HAL_GPIO_Init+0x2b0>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d046      	beq.n	8000926 <HAL_GPIO_Init+0xfa>
 8000898:	4a90      	ldr	r2, [pc, #576]	; (8000adc <HAL_GPIO_Init+0x2b0>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d85d      	bhi.n	800095a <HAL_GPIO_Init+0x12e>
 800089e:	2b12      	cmp	r3, #18
 80008a0:	d82a      	bhi.n	80008f8 <HAL_GPIO_Init+0xcc>
 80008a2:	2b12      	cmp	r3, #18
 80008a4:	d859      	bhi.n	800095a <HAL_GPIO_Init+0x12e>
 80008a6:	a201      	add	r2, pc, #4	; (adr r2, 80008ac <HAL_GPIO_Init+0x80>)
 80008a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ac:	08000927 	.word	0x08000927
 80008b0:	08000901 	.word	0x08000901
 80008b4:	08000913 	.word	0x08000913
 80008b8:	08000955 	.word	0x08000955
 80008bc:	0800095b 	.word	0x0800095b
 80008c0:	0800095b 	.word	0x0800095b
 80008c4:	0800095b 	.word	0x0800095b
 80008c8:	0800095b 	.word	0x0800095b
 80008cc:	0800095b 	.word	0x0800095b
 80008d0:	0800095b 	.word	0x0800095b
 80008d4:	0800095b 	.word	0x0800095b
 80008d8:	0800095b 	.word	0x0800095b
 80008dc:	0800095b 	.word	0x0800095b
 80008e0:	0800095b 	.word	0x0800095b
 80008e4:	0800095b 	.word	0x0800095b
 80008e8:	0800095b 	.word	0x0800095b
 80008ec:	0800095b 	.word	0x0800095b
 80008f0:	08000909 	.word	0x08000909
 80008f4:	0800091d 	.word	0x0800091d
 80008f8:	4a79      	ldr	r2, [pc, #484]	; (8000ae0 <HAL_GPIO_Init+0x2b4>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d013      	beq.n	8000926 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008fe:	e02c      	b.n	800095a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	623b      	str	r3, [r7, #32]
          break;
 8000906:	e029      	b.n	800095c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	3304      	adds	r3, #4
 800090e:	623b      	str	r3, [r7, #32]
          break;
 8000910:	e024      	b.n	800095c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	3308      	adds	r3, #8
 8000918:	623b      	str	r3, [r7, #32]
          break;
 800091a:	e01f      	b.n	800095c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	330c      	adds	r3, #12
 8000922:	623b      	str	r3, [r7, #32]
          break;
 8000924:	e01a      	b.n	800095c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d102      	bne.n	8000934 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800092e:	2304      	movs	r3, #4
 8000930:	623b      	str	r3, [r7, #32]
          break;
 8000932:	e013      	b.n	800095c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	689b      	ldr	r3, [r3, #8]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d105      	bne.n	8000948 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800093c:	2308      	movs	r3, #8
 800093e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	69fa      	ldr	r2, [r7, #28]
 8000944:	611a      	str	r2, [r3, #16]
          break;
 8000946:	e009      	b.n	800095c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000948:	2308      	movs	r3, #8
 800094a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	615a      	str	r2, [r3, #20]
          break;
 8000952:	e003      	b.n	800095c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
          break;
 8000958:	e000      	b.n	800095c <HAL_GPIO_Init+0x130>
          break;
 800095a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	2bff      	cmp	r3, #255	; 0xff
 8000960:	d801      	bhi.n	8000966 <HAL_GPIO_Init+0x13a>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	e001      	b.n	800096a <HAL_GPIO_Init+0x13e>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	3304      	adds	r3, #4
 800096a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	2bff      	cmp	r3, #255	; 0xff
 8000970:	d802      	bhi.n	8000978 <HAL_GPIO_Init+0x14c>
 8000972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	e002      	b.n	800097e <HAL_GPIO_Init+0x152>
 8000978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097a:	3b08      	subs	r3, #8
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	210f      	movs	r1, #15
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	fa01 f303 	lsl.w	r3, r1, r3
 800098c:	43db      	mvns	r3, r3
 800098e:	401a      	ands	r2, r3
 8000990:	6a39      	ldr	r1, [r7, #32]
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	fa01 f303 	lsl.w	r3, r1, r3
 8000998:	431a      	orrs	r2, r3
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f000 80b1 	beq.w	8000b0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009ac:	4b4d      	ldr	r3, [pc, #308]	; (8000ae4 <HAL_GPIO_Init+0x2b8>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	4a4c      	ldr	r2, [pc, #304]	; (8000ae4 <HAL_GPIO_Init+0x2b8>)
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	6193      	str	r3, [r2, #24]
 80009b8:	4b4a      	ldr	r3, [pc, #296]	; (8000ae4 <HAL_GPIO_Init+0x2b8>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009c4:	4a48      	ldr	r2, [pc, #288]	; (8000ae8 <HAL_GPIO_Init+0x2bc>)
 80009c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c8:	089b      	lsrs	r3, r3, #2
 80009ca:	3302      	adds	r3, #2
 80009cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d4:	f003 0303 	and.w	r3, r3, #3
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	220f      	movs	r2, #15
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	43db      	mvns	r3, r3
 80009e2:	68fa      	ldr	r2, [r7, #12]
 80009e4:	4013      	ands	r3, r2
 80009e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a40      	ldr	r2, [pc, #256]	; (8000aec <HAL_GPIO_Init+0x2c0>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d013      	beq.n	8000a18 <HAL_GPIO_Init+0x1ec>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a3f      	ldr	r2, [pc, #252]	; (8000af0 <HAL_GPIO_Init+0x2c4>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d00d      	beq.n	8000a14 <HAL_GPIO_Init+0x1e8>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a3e      	ldr	r2, [pc, #248]	; (8000af4 <HAL_GPIO_Init+0x2c8>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d007      	beq.n	8000a10 <HAL_GPIO_Init+0x1e4>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a3d      	ldr	r2, [pc, #244]	; (8000af8 <HAL_GPIO_Init+0x2cc>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d101      	bne.n	8000a0c <HAL_GPIO_Init+0x1e0>
 8000a08:	2303      	movs	r3, #3
 8000a0a:	e006      	b.n	8000a1a <HAL_GPIO_Init+0x1ee>
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	e004      	b.n	8000a1a <HAL_GPIO_Init+0x1ee>
 8000a10:	2302      	movs	r3, #2
 8000a12:	e002      	b.n	8000a1a <HAL_GPIO_Init+0x1ee>
 8000a14:	2301      	movs	r3, #1
 8000a16:	e000      	b.n	8000a1a <HAL_GPIO_Init+0x1ee>
 8000a18:	2300      	movs	r3, #0
 8000a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a1c:	f002 0203 	and.w	r2, r2, #3
 8000a20:	0092      	lsls	r2, r2, #2
 8000a22:	4093      	lsls	r3, r2
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a2a:	492f      	ldr	r1, [pc, #188]	; (8000ae8 <HAL_GPIO_Init+0x2bc>)
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2e:	089b      	lsrs	r3, r3, #2
 8000a30:	3302      	adds	r3, #2
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d006      	beq.n	8000a52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a44:	4b2d      	ldr	r3, [pc, #180]	; (8000afc <HAL_GPIO_Init+0x2d0>)
 8000a46:	689a      	ldr	r2, [r3, #8]
 8000a48:	492c      	ldr	r1, [pc, #176]	; (8000afc <HAL_GPIO_Init+0x2d0>)
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	608b      	str	r3, [r1, #8]
 8000a50:	e006      	b.n	8000a60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a52:	4b2a      	ldr	r3, [pc, #168]	; (8000afc <HAL_GPIO_Init+0x2d0>)
 8000a54:	689a      	ldr	r2, [r3, #8]
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	4928      	ldr	r1, [pc, #160]	; (8000afc <HAL_GPIO_Init+0x2d0>)
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d006      	beq.n	8000a7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a6c:	4b23      	ldr	r3, [pc, #140]	; (8000afc <HAL_GPIO_Init+0x2d0>)
 8000a6e:	68da      	ldr	r2, [r3, #12]
 8000a70:	4922      	ldr	r1, [pc, #136]	; (8000afc <HAL_GPIO_Init+0x2d0>)
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	60cb      	str	r3, [r1, #12]
 8000a78:	e006      	b.n	8000a88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a7a:	4b20      	ldr	r3, [pc, #128]	; (8000afc <HAL_GPIO_Init+0x2d0>)
 8000a7c:	68da      	ldr	r2, [r3, #12]
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	43db      	mvns	r3, r3
 8000a82:	491e      	ldr	r1, [pc, #120]	; (8000afc <HAL_GPIO_Init+0x2d0>)
 8000a84:	4013      	ands	r3, r2
 8000a86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d006      	beq.n	8000aa2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a94:	4b19      	ldr	r3, [pc, #100]	; (8000afc <HAL_GPIO_Init+0x2d0>)
 8000a96:	685a      	ldr	r2, [r3, #4]
 8000a98:	4918      	ldr	r1, [pc, #96]	; (8000afc <HAL_GPIO_Init+0x2d0>)
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	604b      	str	r3, [r1, #4]
 8000aa0:	e006      	b.n	8000ab0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <HAL_GPIO_Init+0x2d0>)
 8000aa4:	685a      	ldr	r2, [r3, #4]
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	4914      	ldr	r1, [pc, #80]	; (8000afc <HAL_GPIO_Init+0x2d0>)
 8000aac:	4013      	ands	r3, r2
 8000aae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d021      	beq.n	8000b00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <HAL_GPIO_Init+0x2d0>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	490e      	ldr	r1, [pc, #56]	; (8000afc <HAL_GPIO_Init+0x2d0>)
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	600b      	str	r3, [r1, #0]
 8000ac8:	e021      	b.n	8000b0e <HAL_GPIO_Init+0x2e2>
 8000aca:	bf00      	nop
 8000acc:	10320000 	.word	0x10320000
 8000ad0:	10310000 	.word	0x10310000
 8000ad4:	10220000 	.word	0x10220000
 8000ad8:	10210000 	.word	0x10210000
 8000adc:	10120000 	.word	0x10120000
 8000ae0:	10110000 	.word	0x10110000
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	40010000 	.word	0x40010000
 8000aec:	40010800 	.word	0x40010800
 8000af0:	40010c00 	.word	0x40010c00
 8000af4:	40011000 	.word	0x40011000
 8000af8:	40011400 	.word	0x40011400
 8000afc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <HAL_GPIO_Init+0x304>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	43db      	mvns	r3, r3
 8000b08:	4909      	ldr	r1, [pc, #36]	; (8000b30 <HAL_GPIO_Init+0x304>)
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b10:	3301      	adds	r3, #1
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f47f ae8e 	bne.w	8000840 <HAL_GPIO_Init+0x14>
  }
}
 8000b24:	bf00      	nop
 8000b26:	bf00      	nop
 8000b28:	372c      	adds	r7, #44	; 0x2c
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	40010400 	.word	0x40010400

08000b34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689a      	ldr	r2, [r3, #8]
 8000b44:	887b      	ldrh	r3, [r7, #2]
 8000b46:	4013      	ands	r3, r2
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d002      	beq.n	8000b52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	73fb      	strb	r3, [r7, #15]
 8000b50:	e001      	b.n	8000b56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b52:	2300      	movs	r3, #0
 8000b54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr

08000b62 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	807b      	strh	r3, [r7, #2]
 8000b6e:	4613      	mov	r3, r2
 8000b70:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b72:	787b      	ldrb	r3, [r7, #1]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d003      	beq.n	8000b80 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b78:	887a      	ldrh	r2, [r7, #2]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b7e:	e003      	b.n	8000b88 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b80:	887b      	ldrh	r3, [r7, #2]
 8000b82:	041a      	lsls	r2, r3, #16
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	611a      	str	r2, [r3, #16]
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr

08000b92 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b085      	sub	sp, #20
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ba4:	887a      	ldrh	r2, [r7, #2]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	041a      	lsls	r2, r3, #16
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	43d9      	mvns	r1, r3
 8000bb0:	887b      	ldrh	r3, [r7, #2]
 8000bb2:	400b      	ands	r3, r1
 8000bb4:	431a      	orrs	r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	611a      	str	r2, [r3, #16]
}
 8000bba:	bf00      	nop
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr

08000bc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d101      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e272      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f000 8087 	beq.w	8000cf2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000be4:	4b92      	ldr	r3, [pc, #584]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 030c 	and.w	r3, r3, #12
 8000bec:	2b04      	cmp	r3, #4
 8000bee:	d00c      	beq.n	8000c0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bf0:	4b8f      	ldr	r3, [pc, #572]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 030c 	and.w	r3, r3, #12
 8000bf8:	2b08      	cmp	r3, #8
 8000bfa:	d112      	bne.n	8000c22 <HAL_RCC_OscConfig+0x5e>
 8000bfc:	4b8c      	ldr	r3, [pc, #560]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c08:	d10b      	bne.n	8000c22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c0a:	4b89      	ldr	r3, [pc, #548]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d06c      	beq.n	8000cf0 <HAL_RCC_OscConfig+0x12c>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d168      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e24c      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c2a:	d106      	bne.n	8000c3a <HAL_RCC_OscConfig+0x76>
 8000c2c:	4b80      	ldr	r3, [pc, #512]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a7f      	ldr	r2, [pc, #508]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c36:	6013      	str	r3, [r2, #0]
 8000c38:	e02e      	b.n	8000c98 <HAL_RCC_OscConfig+0xd4>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d10c      	bne.n	8000c5c <HAL_RCC_OscConfig+0x98>
 8000c42:	4b7b      	ldr	r3, [pc, #492]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a7a      	ldr	r2, [pc, #488]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	4b78      	ldr	r3, [pc, #480]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a77      	ldr	r2, [pc, #476]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	e01d      	b.n	8000c98 <HAL_RCC_OscConfig+0xd4>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c64:	d10c      	bne.n	8000c80 <HAL_RCC_OscConfig+0xbc>
 8000c66:	4b72      	ldr	r3, [pc, #456]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a71      	ldr	r2, [pc, #452]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	4b6f      	ldr	r3, [pc, #444]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a6e      	ldr	r2, [pc, #440]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c7c:	6013      	str	r3, [r2, #0]
 8000c7e:	e00b      	b.n	8000c98 <HAL_RCC_OscConfig+0xd4>
 8000c80:	4b6b      	ldr	r3, [pc, #428]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a6a      	ldr	r2, [pc, #424]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	4b68      	ldr	r3, [pc, #416]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a67      	ldr	r2, [pc, #412]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d013      	beq.n	8000cc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca0:	f7ff fcd6 	bl	8000650 <HAL_GetTick>
 8000ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca6:	e008      	b.n	8000cba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ca8:	f7ff fcd2 	bl	8000650 <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	2b64      	cmp	r3, #100	; 0x64
 8000cb4:	d901      	bls.n	8000cba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	e200      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cba:	4b5d      	ldr	r3, [pc, #372]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d0f0      	beq.n	8000ca8 <HAL_RCC_OscConfig+0xe4>
 8000cc6:	e014      	b.n	8000cf2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc8:	f7ff fcc2 	bl	8000650 <HAL_GetTick>
 8000ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cce:	e008      	b.n	8000ce2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cd0:	f7ff fcbe 	bl	8000650 <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b64      	cmp	r3, #100	; 0x64
 8000cdc:	d901      	bls.n	8000ce2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e1ec      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ce2:	4b53      	ldr	r3, [pc, #332]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1f0      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x10c>
 8000cee:	e000      	b.n	8000cf2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d063      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cfe:	4b4c      	ldr	r3, [pc, #304]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 030c 	and.w	r3, r3, #12
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d00b      	beq.n	8000d22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d0a:	4b49      	ldr	r3, [pc, #292]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 030c 	and.w	r3, r3, #12
 8000d12:	2b08      	cmp	r3, #8
 8000d14:	d11c      	bne.n	8000d50 <HAL_RCC_OscConfig+0x18c>
 8000d16:	4b46      	ldr	r3, [pc, #280]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d116      	bne.n	8000d50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d22:	4b43      	ldr	r3, [pc, #268]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d005      	beq.n	8000d3a <HAL_RCC_OscConfig+0x176>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	691b      	ldr	r3, [r3, #16]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d001      	beq.n	8000d3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e1c0      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d3a:	4b3d      	ldr	r3, [pc, #244]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	4939      	ldr	r1, [pc, #228]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d4e:	e03a      	b.n	8000dc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	691b      	ldr	r3, [r3, #16]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d020      	beq.n	8000d9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d58:	4b36      	ldr	r3, [pc, #216]	; (8000e34 <HAL_RCC_OscConfig+0x270>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d5e:	f7ff fc77 	bl	8000650 <HAL_GetTick>
 8000d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d64:	e008      	b.n	8000d78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d66:	f7ff fc73 	bl	8000650 <HAL_GetTick>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d901      	bls.n	8000d78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d74:	2303      	movs	r3, #3
 8000d76:	e1a1      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d78:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d0f0      	beq.n	8000d66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d84:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	695b      	ldr	r3, [r3, #20]
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	4927      	ldr	r1, [pc, #156]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	4313      	orrs	r3, r2
 8000d96:	600b      	str	r3, [r1, #0]
 8000d98:	e015      	b.n	8000dc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d9a:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <HAL_RCC_OscConfig+0x270>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da0:	f7ff fc56 	bl	8000650 <HAL_GetTick>
 8000da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000da6:	e008      	b.n	8000dba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000da8:	f7ff fc52 	bl	8000650 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d901      	bls.n	8000dba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e180      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dba:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1f0      	bne.n	8000da8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 0308 	and.w	r3, r3, #8
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d03a      	beq.n	8000e48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d019      	beq.n	8000e0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <HAL_RCC_OscConfig+0x274>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000de0:	f7ff fc36 	bl	8000650 <HAL_GetTick>
 8000de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000de6:	e008      	b.n	8000dfa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000de8:	f7ff fc32 	bl	8000650 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d901      	bls.n	8000dfa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e160      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0f0      	beq.n	8000de8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f000 face 	bl	80013a8 <RCC_Delay>
 8000e0c:	e01c      	b.n	8000e48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_RCC_OscConfig+0x274>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e14:	f7ff fc1c 	bl	8000650 <HAL_GetTick>
 8000e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e1a:	e00f      	b.n	8000e3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e1c:	f7ff fc18 	bl	8000650 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d908      	bls.n	8000e3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e146      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
 8000e2e:	bf00      	nop
 8000e30:	40021000 	.word	0x40021000
 8000e34:	42420000 	.word	0x42420000
 8000e38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e3c:	4b92      	ldr	r3, [pc, #584]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1e9      	bne.n	8000e1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0304 	and.w	r3, r3, #4
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	f000 80a6 	beq.w	8000fa2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e56:	2300      	movs	r3, #0
 8000e58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e5a:	4b8b      	ldr	r3, [pc, #556]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d10d      	bne.n	8000e82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	4b88      	ldr	r3, [pc, #544]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	4a87      	ldr	r2, [pc, #540]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e70:	61d3      	str	r3, [r2, #28]
 8000e72:	4b85      	ldr	r3, [pc, #532]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e82:	4b82      	ldr	r3, [pc, #520]	; (800108c <HAL_RCC_OscConfig+0x4c8>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d118      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e8e:	4b7f      	ldr	r3, [pc, #508]	; (800108c <HAL_RCC_OscConfig+0x4c8>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a7e      	ldr	r2, [pc, #504]	; (800108c <HAL_RCC_OscConfig+0x4c8>)
 8000e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e9a:	f7ff fbd9 	bl	8000650 <HAL_GetTick>
 8000e9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea0:	e008      	b.n	8000eb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ea2:	f7ff fbd5 	bl	8000650 <HAL_GetTick>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	2b64      	cmp	r3, #100	; 0x64
 8000eae:	d901      	bls.n	8000eb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	e103      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb4:	4b75      	ldr	r3, [pc, #468]	; (800108c <HAL_RCC_OscConfig+0x4c8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d0f0      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d106      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x312>
 8000ec8:	4b6f      	ldr	r3, [pc, #444]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000eca:	6a1b      	ldr	r3, [r3, #32]
 8000ecc:	4a6e      	ldr	r2, [pc, #440]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	6213      	str	r3, [r2, #32]
 8000ed4:	e02d      	b.n	8000f32 <HAL_RCC_OscConfig+0x36e>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10c      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x334>
 8000ede:	4b6a      	ldr	r3, [pc, #424]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000ee0:	6a1b      	ldr	r3, [r3, #32]
 8000ee2:	4a69      	ldr	r2, [pc, #420]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000ee4:	f023 0301 	bic.w	r3, r3, #1
 8000ee8:	6213      	str	r3, [r2, #32]
 8000eea:	4b67      	ldr	r3, [pc, #412]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000eec:	6a1b      	ldr	r3, [r3, #32]
 8000eee:	4a66      	ldr	r2, [pc, #408]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000ef0:	f023 0304 	bic.w	r3, r3, #4
 8000ef4:	6213      	str	r3, [r2, #32]
 8000ef6:	e01c      	b.n	8000f32 <HAL_RCC_OscConfig+0x36e>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	2b05      	cmp	r3, #5
 8000efe:	d10c      	bne.n	8000f1a <HAL_RCC_OscConfig+0x356>
 8000f00:	4b61      	ldr	r3, [pc, #388]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	4a60      	ldr	r2, [pc, #384]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f06:	f043 0304 	orr.w	r3, r3, #4
 8000f0a:	6213      	str	r3, [r2, #32]
 8000f0c:	4b5e      	ldr	r3, [pc, #376]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	4a5d      	ldr	r2, [pc, #372]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	6213      	str	r3, [r2, #32]
 8000f18:	e00b      	b.n	8000f32 <HAL_RCC_OscConfig+0x36e>
 8000f1a:	4b5b      	ldr	r3, [pc, #364]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f1c:	6a1b      	ldr	r3, [r3, #32]
 8000f1e:	4a5a      	ldr	r2, [pc, #360]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f20:	f023 0301 	bic.w	r3, r3, #1
 8000f24:	6213      	str	r3, [r2, #32]
 8000f26:	4b58      	ldr	r3, [pc, #352]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f28:	6a1b      	ldr	r3, [r3, #32]
 8000f2a:	4a57      	ldr	r2, [pc, #348]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f2c:	f023 0304 	bic.w	r3, r3, #4
 8000f30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d015      	beq.n	8000f66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f3a:	f7ff fb89 	bl	8000650 <HAL_GetTick>
 8000f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f40:	e00a      	b.n	8000f58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f42:	f7ff fb85 	bl	8000650 <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d901      	bls.n	8000f58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f54:	2303      	movs	r3, #3
 8000f56:	e0b1      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f58:	4b4b      	ldr	r3, [pc, #300]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f5a:	6a1b      	ldr	r3, [r3, #32]
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d0ee      	beq.n	8000f42 <HAL_RCC_OscConfig+0x37e>
 8000f64:	e014      	b.n	8000f90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f66:	f7ff fb73 	bl	8000650 <HAL_GetTick>
 8000f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f6c:	e00a      	b.n	8000f84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f6e:	f7ff fb6f 	bl	8000650 <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e09b      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f84:	4b40      	ldr	r3, [pc, #256]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f86:	6a1b      	ldr	r3, [r3, #32]
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1ee      	bne.n	8000f6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f90:	7dfb      	ldrb	r3, [r7, #23]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d105      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f96:	4b3c      	ldr	r3, [pc, #240]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	4a3b      	ldr	r2, [pc, #236]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f000 8087 	beq.w	80010ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fac:	4b36      	ldr	r3, [pc, #216]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 030c 	and.w	r3, r3, #12
 8000fb4:	2b08      	cmp	r3, #8
 8000fb6:	d061      	beq.n	800107c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69db      	ldr	r3, [r3, #28]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d146      	bne.n	800104e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fc0:	4b33      	ldr	r3, [pc, #204]	; (8001090 <HAL_RCC_OscConfig+0x4cc>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc6:	f7ff fb43 	bl	8000650 <HAL_GetTick>
 8000fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fcc:	e008      	b.n	8000fe0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fce:	f7ff fb3f 	bl	8000650 <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d901      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e06d      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fe0:	4b29      	ldr	r3, [pc, #164]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1f0      	bne.n	8000fce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a1b      	ldr	r3, [r3, #32]
 8000ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff4:	d108      	bne.n	8001008 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ff6:	4b24      	ldr	r3, [pc, #144]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	4921      	ldr	r1, [pc, #132]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8001004:	4313      	orrs	r3, r2
 8001006:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001008:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a19      	ldr	r1, [r3, #32]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001018:	430b      	orrs	r3, r1
 800101a:	491b      	ldr	r1, [pc, #108]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 800101c:	4313      	orrs	r3, r2
 800101e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <HAL_RCC_OscConfig+0x4cc>)
 8001022:	2201      	movs	r2, #1
 8001024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001026:	f7ff fb13 	bl	8000650 <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800102e:	f7ff fb0f 	bl	8000650 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e03d      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0f0      	beq.n	800102e <HAL_RCC_OscConfig+0x46a>
 800104c:	e035      	b.n	80010ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <HAL_RCC_OscConfig+0x4cc>)
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001054:	f7ff fafc 	bl	8000650 <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800105a:	e008      	b.n	800106e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800105c:	f7ff faf8 	bl	8000650 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e026      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f0      	bne.n	800105c <HAL_RCC_OscConfig+0x498>
 800107a:	e01e      	b.n	80010ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	69db      	ldr	r3, [r3, #28]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d107      	bne.n	8001094 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e019      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
 8001088:	40021000 	.word	0x40021000
 800108c:	40007000 	.word	0x40007000
 8001090:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <HAL_RCC_OscConfig+0x500>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d106      	bne.n	80010b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d001      	beq.n	80010ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e000      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40021000 	.word	0x40021000

080010c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d101      	bne.n	80010dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e0d0      	b.n	800127e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010dc:	4b6a      	ldr	r3, [pc, #424]	; (8001288 <HAL_RCC_ClockConfig+0x1c0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d910      	bls.n	800110c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ea:	4b67      	ldr	r3, [pc, #412]	; (8001288 <HAL_RCC_ClockConfig+0x1c0>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f023 0207 	bic.w	r2, r3, #7
 80010f2:	4965      	ldr	r1, [pc, #404]	; (8001288 <HAL_RCC_ClockConfig+0x1c0>)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010fa:	4b63      	ldr	r3, [pc, #396]	; (8001288 <HAL_RCC_ClockConfig+0x1c0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	d001      	beq.n	800110c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e0b8      	b.n	800127e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d020      	beq.n	800115a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	2b00      	cmp	r3, #0
 8001122:	d005      	beq.n	8001130 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001124:	4b59      	ldr	r3, [pc, #356]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	4a58      	ldr	r2, [pc, #352]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 800112a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800112e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0308 	and.w	r3, r3, #8
 8001138:	2b00      	cmp	r3, #0
 800113a:	d005      	beq.n	8001148 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800113c:	4b53      	ldr	r3, [pc, #332]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	4a52      	ldr	r2, [pc, #328]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001142:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001146:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001148:	4b50      	ldr	r3, [pc, #320]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	494d      	ldr	r1, [pc, #308]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001156:	4313      	orrs	r3, r2
 8001158:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	2b00      	cmp	r3, #0
 8001164:	d040      	beq.n	80011e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d107      	bne.n	800117e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116e:	4b47      	ldr	r3, [pc, #284]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d115      	bne.n	80011a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e07f      	b.n	800127e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b02      	cmp	r3, #2
 8001184:	d107      	bne.n	8001196 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001186:	4b41      	ldr	r3, [pc, #260]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d109      	bne.n	80011a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e073      	b.n	800127e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001196:	4b3d      	ldr	r3, [pc, #244]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e06b      	b.n	800127e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011a6:	4b39      	ldr	r3, [pc, #228]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f023 0203 	bic.w	r2, r3, #3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	4936      	ldr	r1, [pc, #216]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 80011b4:	4313      	orrs	r3, r2
 80011b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011b8:	f7ff fa4a 	bl	8000650 <HAL_GetTick>
 80011bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011be:	e00a      	b.n	80011d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011c0:	f7ff fa46 	bl	8000650 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e053      	b.n	800127e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011d6:	4b2d      	ldr	r3, [pc, #180]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 020c 	and.w	r2, r3, #12
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d1eb      	bne.n	80011c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011e8:	4b27      	ldr	r3, [pc, #156]	; (8001288 <HAL_RCC_ClockConfig+0x1c0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0307 	and.w	r3, r3, #7
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d210      	bcs.n	8001218 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f6:	4b24      	ldr	r3, [pc, #144]	; (8001288 <HAL_RCC_ClockConfig+0x1c0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f023 0207 	bic.w	r2, r3, #7
 80011fe:	4922      	ldr	r1, [pc, #136]	; (8001288 <HAL_RCC_ClockConfig+0x1c0>)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	4313      	orrs	r3, r2
 8001204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001206:	4b20      	ldr	r3, [pc, #128]	; (8001288 <HAL_RCC_ClockConfig+0x1c0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	429a      	cmp	r2, r3
 8001212:	d001      	beq.n	8001218 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e032      	b.n	800127e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	2b00      	cmp	r3, #0
 8001222:	d008      	beq.n	8001236 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001224:	4b19      	ldr	r3, [pc, #100]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	4916      	ldr	r1, [pc, #88]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001232:	4313      	orrs	r3, r2
 8001234:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0308 	and.w	r3, r3, #8
 800123e:	2b00      	cmp	r3, #0
 8001240:	d009      	beq.n	8001256 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001242:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	490e      	ldr	r1, [pc, #56]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001252:	4313      	orrs	r3, r2
 8001254:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001256:	f000 f821 	bl	800129c <HAL_RCC_GetSysClockFreq>
 800125a:	4602      	mov	r2, r0
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	091b      	lsrs	r3, r3, #4
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	490a      	ldr	r1, [pc, #40]	; (8001290 <HAL_RCC_ClockConfig+0x1c8>)
 8001268:	5ccb      	ldrb	r3, [r1, r3]
 800126a:	fa22 f303 	lsr.w	r3, r2, r3
 800126e:	4a09      	ldr	r2, [pc, #36]	; (8001294 <HAL_RCC_ClockConfig+0x1cc>)
 8001270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <HAL_RCC_ClockConfig+0x1d0>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f9a8 	bl	80005cc <HAL_InitTick>

  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40022000 	.word	0x40022000
 800128c:	40021000 	.word	0x40021000
 8001290:	08002fec 	.word	0x08002fec
 8001294:	20000000 	.word	0x20000000
 8001298:	20000004 	.word	0x20000004

0800129c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800129c:	b480      	push	{r7}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012b6:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <HAL_RCC_GetSysClockFreq+0x94>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f003 030c 	and.w	r3, r3, #12
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	d002      	beq.n	80012cc <HAL_RCC_GetSysClockFreq+0x30>
 80012c6:	2b08      	cmp	r3, #8
 80012c8:	d003      	beq.n	80012d2 <HAL_RCC_GetSysClockFreq+0x36>
 80012ca:	e027      	b.n	800131c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <HAL_RCC_GetSysClockFreq+0x98>)
 80012ce:	613b      	str	r3, [r7, #16]
      break;
 80012d0:	e027      	b.n	8001322 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	0c9b      	lsrs	r3, r3, #18
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	4a17      	ldr	r2, [pc, #92]	; (8001338 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012dc:	5cd3      	ldrb	r3, [r2, r3]
 80012de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d010      	beq.n	800130c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <HAL_RCC_GetSysClockFreq+0x94>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	0c5b      	lsrs	r3, r3, #17
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	4a11      	ldr	r2, [pc, #68]	; (800133c <HAL_RCC_GetSysClockFreq+0xa0>)
 80012f6:	5cd3      	ldrb	r3, [r2, r3]
 80012f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a0d      	ldr	r2, [pc, #52]	; (8001334 <HAL_RCC_GetSysClockFreq+0x98>)
 80012fe:	fb03 f202 	mul.w	r2, r3, r2
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	fbb2 f3f3 	udiv	r3, r2, r3
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	e004      	b.n	8001316 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a0c      	ldr	r2, [pc, #48]	; (8001340 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001310:	fb02 f303 	mul.w	r3, r2, r3
 8001314:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	613b      	str	r3, [r7, #16]
      break;
 800131a:	e002      	b.n	8001322 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <HAL_RCC_GetSysClockFreq+0x98>)
 800131e:	613b      	str	r3, [r7, #16]
      break;
 8001320:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001322:	693b      	ldr	r3, [r7, #16]
}
 8001324:	4618      	mov	r0, r3
 8001326:	371c      	adds	r7, #28
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40021000 	.word	0x40021000
 8001334:	007a1200 	.word	0x007a1200
 8001338:	08003004 	.word	0x08003004
 800133c:	08003014 	.word	0x08003014
 8001340:	003d0900 	.word	0x003d0900

08001344 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001348:	4b02      	ldr	r3, [pc, #8]	; (8001354 <HAL_RCC_GetHCLKFreq+0x10>)
 800134a:	681b      	ldr	r3, [r3, #0]
}
 800134c:	4618      	mov	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	20000000 	.word	0x20000000

08001358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800135c:	f7ff fff2 	bl	8001344 <HAL_RCC_GetHCLKFreq>
 8001360:	4602      	mov	r2, r0
 8001362:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	0a1b      	lsrs	r3, r3, #8
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	4903      	ldr	r1, [pc, #12]	; (800137c <HAL_RCC_GetPCLK1Freq+0x24>)
 800136e:	5ccb      	ldrb	r3, [r1, r3]
 8001370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001374:	4618      	mov	r0, r3
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40021000 	.word	0x40021000
 800137c:	08002ffc 	.word	0x08002ffc

08001380 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001384:	f7ff ffde 	bl	8001344 <HAL_RCC_GetHCLKFreq>
 8001388:	4602      	mov	r2, r0
 800138a:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	0adb      	lsrs	r3, r3, #11
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	4903      	ldr	r1, [pc, #12]	; (80013a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001396:	5ccb      	ldrb	r3, [r1, r3]
 8001398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800139c:	4618      	mov	r0, r3
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40021000 	.word	0x40021000
 80013a4:	08002ffc 	.word	0x08002ffc

080013a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <RCC_Delay+0x34>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <RCC_Delay+0x38>)
 80013b6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ba:	0a5b      	lsrs	r3, r3, #9
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	fb02 f303 	mul.w	r3, r2, r3
 80013c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013c4:	bf00      	nop
  }
  while (Delay --);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	1e5a      	subs	r2, r3, #1
 80013ca:	60fa      	str	r2, [r7, #12]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1f9      	bne.n	80013c4 <RCC_Delay+0x1c>
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	20000000 	.word	0x20000000
 80013e0:	10624dd3 	.word	0x10624dd3

080013e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e042      	b.n	800147c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d106      	bne.n	8001410 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff f828 	bl	8000460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2224      	movs	r2, #36	; 0x24
 8001414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68da      	ldr	r2, [r3, #12]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001426:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 f92b 	bl	8001684 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	691a      	ldr	r2, [r3, #16]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800143c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	695a      	ldr	r2, [r3, #20]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800144c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	68da      	ldr	r2, [r3, #12]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800145c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2220      	movs	r2, #32
 8001468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2220      	movs	r2, #32
 8001470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af02      	add	r7, sp, #8
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	4613      	mov	r3, r2
 8001492:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b20      	cmp	r3, #32
 80014a2:	d17c      	bne.n	800159e <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d002      	beq.n	80014b0 <HAL_UART_Receive+0x2c>
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e075      	b.n	80015a0 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2200      	movs	r2, #0
 80014b8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2222      	movs	r2, #34	; 0x22
 80014be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2200      	movs	r2, #0
 80014c6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80014c8:	f7ff f8c2 	bl	8000650 <HAL_GetTick>
 80014cc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	88fa      	ldrh	r2, [r7, #6]
 80014d2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	88fa      	ldrh	r2, [r7, #6]
 80014d8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014e2:	d108      	bne.n	80014f6 <HAL_UART_Receive+0x72>
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d104      	bne.n	80014f6 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	61bb      	str	r3, [r7, #24]
 80014f4:	e003      	b.n	80014fe <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80014fe:	e043      	b.n	8001588 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	2200      	movs	r2, #0
 8001508:	2120      	movs	r1, #32
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	f000 f84c 	bl	80015a8 <UART_WaitOnFlagUntilTimeout>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e042      	b.n	80015a0 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10c      	bne.n	800153a <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	b29b      	uxth	r3, r3
 8001528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800152c:	b29a      	uxth	r2, r3
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	3302      	adds	r3, #2
 8001536:	61bb      	str	r3, [r7, #24]
 8001538:	e01f      	b.n	800157a <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001542:	d007      	beq.n	8001554 <HAL_UART_Receive+0xd0>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d10a      	bne.n	8001562 <HAL_UART_Receive+0xde>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d106      	bne.n	8001562 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	701a      	strb	r2, [r3, #0]
 8001560:	e008      	b.n	8001574 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800156e:	b2da      	uxtb	r2, r3
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	3301      	adds	r3, #1
 8001578:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800157e:	b29b      	uxth	r3, r3
 8001580:	3b01      	subs	r3, #1
 8001582:	b29a      	uxth	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800158c:	b29b      	uxth	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1b6      	bne.n	8001500 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2220      	movs	r2, #32
 8001596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	e000      	b.n	80015a0 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800159e:	2302      	movs	r3, #2
  }
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3720      	adds	r7, #32
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b090      	sub	sp, #64	; 0x40
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	4613      	mov	r3, r2
 80015b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80015b8:	e050      	b.n	800165c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c0:	d04c      	beq.n	800165c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80015c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d007      	beq.n	80015d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80015c8:	f7ff f842 	bl	8000650 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d241      	bcs.n	800165c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	330c      	adds	r3, #12
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e2:	e853 3f00 	ldrex	r3, [r3]
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80015ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	330c      	adds	r3, #12
 80015f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015f8:	637a      	str	r2, [r7, #52]	; 0x34
 80015fa:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001600:	e841 2300 	strex	r3, r2, [r1]
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1e5      	bne.n	80015d8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	3314      	adds	r3, #20
 8001612:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	e853 3f00 	ldrex	r3, [r3]
 800161a:	613b      	str	r3, [r7, #16]
   return(result);
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	f023 0301 	bic.w	r3, r3, #1
 8001622:	63bb      	str	r3, [r7, #56]	; 0x38
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	3314      	adds	r3, #20
 800162a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800162c:	623a      	str	r2, [r7, #32]
 800162e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001630:	69f9      	ldr	r1, [r7, #28]
 8001632:	6a3a      	ldr	r2, [r7, #32]
 8001634:	e841 2300 	strex	r3, r2, [r1]
 8001638:	61bb      	str	r3, [r7, #24]
   return(result);
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1e5      	bne.n	800160c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2220      	movs	r2, #32
 8001644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2220      	movs	r2, #32
 800164c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e00f      	b.n	800167c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	4013      	ands	r3, r2
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	429a      	cmp	r2, r3
 800166a:	bf0c      	ite	eq
 800166c:	2301      	moveq	r3, #1
 800166e:	2300      	movne	r3, #0
 8001670:	b2db      	uxtb	r3, r3
 8001672:	461a      	mov	r2, r3
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	429a      	cmp	r2, r3
 8001678:	d09f      	beq.n	80015ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3740      	adds	r7, #64	; 0x40
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80016be:	f023 030c 	bic.w	r3, r3, #12
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6812      	ldr	r2, [r2, #0]
 80016c6:	68b9      	ldr	r1, [r7, #8]
 80016c8:	430b      	orrs	r3, r1
 80016ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699a      	ldr	r2, [r3, #24]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	430a      	orrs	r2, r1
 80016e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a2c      	ldr	r2, [pc, #176]	; (8001798 <UART_SetConfig+0x114>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d103      	bne.n	80016f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80016ec:	f7ff fe48 	bl	8001380 <HAL_RCC_GetPCLK2Freq>
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	e002      	b.n	80016fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80016f4:	f7ff fe30 	bl	8001358 <HAL_RCC_GetPCLK1Freq>
 80016f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	009a      	lsls	r2, r3, #2
 8001704:	441a      	add	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001710:	4a22      	ldr	r2, [pc, #136]	; (800179c <UART_SetConfig+0x118>)
 8001712:	fba2 2303 	umull	r2, r3, r2, r3
 8001716:	095b      	lsrs	r3, r3, #5
 8001718:	0119      	lsls	r1, r3, #4
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	009a      	lsls	r2, r3, #2
 8001724:	441a      	add	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001730:	4b1a      	ldr	r3, [pc, #104]	; (800179c <UART_SetConfig+0x118>)
 8001732:	fba3 0302 	umull	r0, r3, r3, r2
 8001736:	095b      	lsrs	r3, r3, #5
 8001738:	2064      	movs	r0, #100	; 0x64
 800173a:	fb00 f303 	mul.w	r3, r0, r3
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	011b      	lsls	r3, r3, #4
 8001742:	3332      	adds	r3, #50	; 0x32
 8001744:	4a15      	ldr	r2, [pc, #84]	; (800179c <UART_SetConfig+0x118>)
 8001746:	fba2 2303 	umull	r2, r3, r2, r3
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001750:	4419      	add	r1, r3
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	009a      	lsls	r2, r3, #2
 800175c:	441a      	add	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	fbb2 f2f3 	udiv	r2, r2, r3
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <UART_SetConfig+0x118>)
 800176a:	fba3 0302 	umull	r0, r3, r3, r2
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	2064      	movs	r0, #100	; 0x64
 8001772:	fb00 f303 	mul.w	r3, r0, r3
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	3332      	adds	r3, #50	; 0x32
 800177c:	4a07      	ldr	r2, [pc, #28]	; (800179c <UART_SetConfig+0x118>)
 800177e:	fba2 2303 	umull	r2, r3, r2, r3
 8001782:	095b      	lsrs	r3, r3, #5
 8001784:	f003 020f 	and.w	r2, r3, #15
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	440a      	add	r2, r1
 800178e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001790:	bf00      	nop
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40013800 	.word	0x40013800
 800179c:	51eb851f 	.word	0x51eb851f

080017a0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f103 0208 	add.w	r2, r3, #8
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295
 80017b8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f103 0208 	add.w	r2, r3, #8
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f103 0208 	add.w	r2, r3, #8
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr

080017de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr

080017f6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80017f6:	b480      	push	{r7}
 80017f8:	b085      	sub	sp, #20
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
 80017fe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800180c:	d103      	bne.n	8001816 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	e00c      	b.n	8001830 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3308      	adds	r3, #8
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	e002      	b.n	8001824 <vListInsert+0x2e>
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	429a      	cmp	r2, r3
 800182e:	d2f6      	bcs.n	800181e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	601a      	str	r2, [r3, #0]
}
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr

08001866 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001866:	b480      	push	{r7}
 8001868:	b085      	sub	sp, #20
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6892      	ldr	r2, [r2, #8]
 800187c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6852      	ldr	r2, [r2, #4]
 8001886:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	429a      	cmp	r2, r3
 8001890:	d103      	bne.n	800189a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689a      	ldr	r2, [r3, #8]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	1e5a      	subs	r2, r3, #1
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80018c2:	2301      	movs	r3, #1
 80018c4:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d05d      	beq.n	800198c <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d059      	beq.n	800198c <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e0:	2100      	movs	r1, #0
 80018e2:	fba3 2302 	umull	r2, r3, r3, r2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d000      	beq.n	80018ec <xQueueGenericReset+0x34>
 80018ea:	2101      	movs	r1, #1
 80018ec:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d14c      	bne.n	800198c <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 80018f2:	f001 fa79 	bl	8002de8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018fe:	68b9      	ldr	r1, [r7, #8]
 8001900:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001902:	fb01 f303 	mul.w	r3, r1, r3
 8001906:	441a      	add	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	2200      	movs	r2, #0
 8001910:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001922:	3b01      	subs	r3, #1
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001928:	fb01 f303 	mul.w	r3, r1, r3
 800192c:	441a      	add	r2, r3
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	22ff      	movs	r2, #255	; 0xff
 8001936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	22ff      	movs	r2, #255	; 0xff
 800193e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d114      	bne.n	8001972 <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d01a      	beq.n	8001986 <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	3310      	adds	r3, #16
 8001954:	4618      	mov	r0, r3
 8001956:	f000 fee9 	bl	800272c <xTaskRemoveFromEventList>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d012      	beq.n	8001986 <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001960:	4b0e      	ldr	r3, [pc, #56]	; (800199c <xQueueGenericReset+0xe4>)
 8001962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	f3bf 8f4f 	dsb	sy
 800196c:	f3bf 8f6f 	isb	sy
 8001970:	e009      	b.n	8001986 <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	3310      	adds	r3, #16
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ff12 	bl	80017a0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	3324      	adds	r3, #36	; 0x24
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff0d 	bl	80017a0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001986:	f001 fa49 	bl	8002e1c <vPortExitCritical>
 800198a:	e001      	b.n	8001990 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001990:	68fb      	ldr	r3, [r7, #12]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	e000ed04 	.word	0xe000ed04

080019a0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	; 0x28
 80019a4:	af02      	add	r7, sp, #8
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	4613      	mov	r3, r2
 80019ac:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d02d      	beq.n	8001a14 <xQueueGenericCreate+0x74>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80019b8:	2100      	movs	r1, #0
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	fba3 2302 	umull	r2, r3, r3, r2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d000      	beq.n	80019c8 <xQueueGenericCreate+0x28>
 80019c6:	2101      	movs	r1, #1
 80019c8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d122      	bne.n	8001a14 <xQueueGenericCreate+0x74>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80019d6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80019da:	d81b      	bhi.n	8001a14 <xQueueGenericCreate+0x74>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	fb02 f303 	mul.w	r3, r2, r3
 80019e4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	3350      	adds	r3, #80	; 0x50
 80019ea:	4618      	mov	r0, r3
 80019ec:	f001 fa4a 	bl	8002e84 <pvPortMalloc>
 80019f0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00d      	beq.n	8001a14 <xQueueGenericCreate+0x74>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	3350      	adds	r3, #80	; 0x50
 8001a00:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001a02:	79fa      	ldrb	r2, [r7, #7]
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	68b9      	ldr	r1, [r7, #8]
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f000 f805 	bl	8001a1e <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001a14:	69fb      	ldr	r3, [r7, #28]
    }
 8001a16:	4618      	mov	r0, r3
 8001a18:	3720      	adds	r7, #32
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b084      	sub	sp, #16
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d103      	bne.n	8001a3a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	e002      	b.n	8001a40 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	69b8      	ldr	r0, [r7, #24]
 8001a50:	f7ff ff32 	bl	80018b8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	78fa      	ldrb	r2, [r7, #3]
 8001a58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001a5c:	bf00      	nop
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	; 0x28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001a72:	2300      	movs	r3, #0
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001a7a:	f001 f9b5 	bl	8002de8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d302      	bcc.n	8001a90 <xQueueGenericSend+0x2c>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d129      	bne.n	8001ae4 <xQueueGenericSend+0x80>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	68b9      	ldr	r1, [r7, #8]
 8001a94:	6a38      	ldr	r0, [r7, #32]
 8001a96:	f000 f931 	bl	8001cfc <prvCopyDataToQueue>
 8001a9a:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d010      	beq.n	8001ac6 <xQueueGenericSend+0x62>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001aa4:	6a3b      	ldr	r3, [r7, #32]
 8001aa6:	3324      	adds	r3, #36	; 0x24
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 fe3f 	bl	800272c <xTaskRemoveFromEventList>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d013      	beq.n	8001adc <xQueueGenericSend+0x78>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001ab4:	4b3f      	ldr	r3, [pc, #252]	; (8001bb4 <xQueueGenericSend+0x150>)
 8001ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	f3bf 8f4f 	dsb	sy
 8001ac0:	f3bf 8f6f 	isb	sy
 8001ac4:	e00a      	b.n	8001adc <xQueueGenericSend+0x78>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d007      	beq.n	8001adc <xQueueGenericSend+0x78>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8001acc:	4b39      	ldr	r3, [pc, #228]	; (8001bb4 <xQueueGenericSend+0x150>)
 8001ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	f3bf 8f4f 	dsb	sy
 8001ad8:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001adc:	f001 f99e 	bl	8002e1c <vPortExitCritical>
                return pdPASS;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e063      	b.n	8001bac <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d103      	bne.n	8001af2 <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001aea:	f001 f997 	bl	8002e1c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e05c      	b.n	8001bac <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d106      	bne.n	8001b06 <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4618      	mov	r0, r3
 8001afe:	f000 fedd 	bl	80028bc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001b02:	2301      	movs	r3, #1
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001b06:	f001 f989 	bl	8002e1c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001b0a:	f000 fbb3 	bl	8002274 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001b0e:	f001 f96b 	bl	8002de8 <vPortEnterCritical>
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b18:	b25b      	sxtb	r3, r3
 8001b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b1e:	d103      	bne.n	8001b28 <xQueueGenericSend+0xc4>
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b2e:	b25b      	sxtb	r3, r3
 8001b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b34:	d103      	bne.n	8001b3e <xQueueGenericSend+0xda>
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b3e:	f001 f96d 	bl	8002e1c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001b42:	1d3a      	adds	r2, r7, #4
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	4611      	mov	r1, r2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 fecc 	bl	80028e8 <xTaskCheckForTimeOut>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d124      	bne.n	8001ba0 <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001b56:	6a38      	ldr	r0, [r7, #32]
 8001b58:	f000 f9c8 	bl	8001eec <prvIsQueueFull>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d018      	beq.n	8001b94 <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001b62:	6a3b      	ldr	r3, [r7, #32]
 8001b64:	3310      	adds	r3, #16
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 fdc8 	bl	8002700 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001b70:	6a38      	ldr	r0, [r7, #32]
 8001b72:	f000 f953 	bl	8001e1c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001b76:	f000 fb8b 	bl	8002290 <xTaskResumeAll>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f47f af7c 	bne.w	8001a7a <xQueueGenericSend+0x16>
                {
                    portYIELD_WITHIN_API();
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <xQueueGenericSend+0x150>)
 8001b84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	f3bf 8f4f 	dsb	sy
 8001b8e:	f3bf 8f6f 	isb	sy
 8001b92:	e772      	b.n	8001a7a <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001b94:	6a38      	ldr	r0, [r7, #32]
 8001b96:	f000 f941 	bl	8001e1c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001b9a:	f000 fb79 	bl	8002290 <xTaskResumeAll>
 8001b9e:	e76c      	b.n	8001a7a <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001ba0:	6a38      	ldr	r0, [r7, #32]
 8001ba2:	f000 f93b 	bl	8001e1c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001ba6:	f000 fb73 	bl	8002290 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8001baa:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3728      	adds	r7, #40	; 0x28
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	e000ed04 	.word	0xe000ed04

08001bb8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	; 0x28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	623b      	str	r3, [r7, #32]
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001bcc:	f001 f90c 	bl	8002de8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001bd0:	6a3b      	ldr	r3, [r7, #32]
 8001bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd4:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d01f      	beq.n	8001c1c <xQueueReceive+0x64>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001bdc:	68b9      	ldr	r1, [r7, #8]
 8001bde:	6a38      	ldr	r0, [r7, #32]
 8001be0:	f000 f8f6 	bl	8001dd0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	1e5a      	subs	r2, r3, #1
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001bec:	6a3b      	ldr	r3, [r7, #32]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00f      	beq.n	8001c14 <xQueueReceive+0x5c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001bf4:	6a3b      	ldr	r3, [r7, #32]
 8001bf6:	3310      	adds	r3, #16
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 fd97 	bl	800272c <xTaskRemoveFromEventList>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d007      	beq.n	8001c14 <xQueueReceive+0x5c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001c04:	4b3c      	ldr	r3, [pc, #240]	; (8001cf8 <xQueueReceive+0x140>)
 8001c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	f3bf 8f4f 	dsb	sy
 8001c10:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001c14:	f001 f902 	bl	8002e1c <vPortExitCritical>
                return pdPASS;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e069      	b.n	8001cf0 <xQueueReceive+0x138>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d103      	bne.n	8001c2a <xQueueReceive+0x72>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001c22:	f001 f8fb 	bl	8002e1c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001c26:	2300      	movs	r3, #0
 8001c28:	e062      	b.n	8001cf0 <xQueueReceive+0x138>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d106      	bne.n	8001c3e <xQueueReceive+0x86>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 fe41 	bl	80028bc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001c3e:	f001 f8ed 	bl	8002e1c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001c42:	f000 fb17 	bl	8002274 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001c46:	f001 f8cf 	bl	8002de8 <vPortEnterCritical>
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c50:	b25b      	sxtb	r3, r3
 8001c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c56:	d103      	bne.n	8001c60 <xQueueReceive+0xa8>
 8001c58:	6a3b      	ldr	r3, [r7, #32]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c66:	b25b      	sxtb	r3, r3
 8001c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c6c:	d103      	bne.n	8001c76 <xQueueReceive+0xbe>
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c76:	f001 f8d1 	bl	8002e1c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001c7a:	1d3a      	adds	r2, r7, #4
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	4611      	mov	r1, r2
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 fe30 	bl	80028e8 <xTaskCheckForTimeOut>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d123      	bne.n	8001cd6 <xQueueReceive+0x11e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001c8e:	6a38      	ldr	r0, [r7, #32]
 8001c90:	f000 f916 	bl	8001ec0 <prvIsQueueEmpty>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d017      	beq.n	8001cca <xQueueReceive+0x112>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
 8001c9c:	3324      	adds	r3, #36	; 0x24
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 fd2c 	bl	8002700 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001ca8:	6a38      	ldr	r0, [r7, #32]
 8001caa:	f000 f8b7 	bl	8001e1c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001cae:	f000 faef 	bl	8002290 <xTaskResumeAll>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d189      	bne.n	8001bcc <xQueueReceive+0x14>
                {
                    portYIELD_WITHIN_API();
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <xQueueReceive+0x140>)
 8001cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	f3bf 8f4f 	dsb	sy
 8001cc4:	f3bf 8f6f 	isb	sy
 8001cc8:	e780      	b.n	8001bcc <xQueueReceive+0x14>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001cca:	6a38      	ldr	r0, [r7, #32]
 8001ccc:	f000 f8a6 	bl	8001e1c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001cd0:	f000 fade 	bl	8002290 <xTaskResumeAll>
 8001cd4:	e77a      	b.n	8001bcc <xQueueReceive+0x14>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001cd6:	6a38      	ldr	r0, [r7, #32]
 8001cd8:	f000 f8a0 	bl	8001e1c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001cdc:	f000 fad8 	bl	8002290 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001ce0:	6a38      	ldr	r0, [r7, #32]
 8001ce2:	f000 f8ed 	bl	8001ec0 <prvIsQueueEmpty>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f43f af6f 	beq.w	8001bcc <xQueueReceive+0x14>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001cee:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3728      	adds	r7, #40	; 0x28
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	e000ed04 	.word	0xe000ed04

08001cfc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d10:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10d      	bne.n	8001d36 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d14d      	bne.n	8001dbe <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 fee4 	bl	8002af4 <xTaskPriorityDisinherit>
 8001d2c:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	e043      	b.n	8001dbe <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d119      	bne.n	8001d70 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6858      	ldr	r0, [r3, #4]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	461a      	mov	r2, r3
 8001d46:	68b9      	ldr	r1, [r7, #8]
 8001d48:	f001 f924 	bl	8002f94 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	441a      	add	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d32b      	bcc.n	8001dbe <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	e026      	b.n	8001dbe <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	68d8      	ldr	r0, [r3, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	461a      	mov	r2, r3
 8001d7a:	68b9      	ldr	r1, [r7, #8]
 8001d7c:	f001 f90a 	bl	8002f94 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	425b      	negs	r3, r3
 8001d8a:	441a      	add	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d207      	bcs.n	8001dac <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	425b      	negs	r3, r3
 8001da6:	441a      	add	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d105      	bne.n	8001dbe <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d002      	beq.n	8001dbe <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8001dc6:	697b      	ldr	r3, [r7, #20]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d018      	beq.n	8001e14 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	441a      	add	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d303      	bcc.n	8001e04 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68d9      	ldr	r1, [r3, #12]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	6838      	ldr	r0, [r7, #0]
 8001e10:	f001 f8c0 	bl	8002f94 <memcpy>
    }
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001e24:	f000 ffe0 	bl	8002de8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e2e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e30:	e011      	b.n	8001e56 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d012      	beq.n	8001e60 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3324      	adds	r3, #36	; 0x24
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 fc74 	bl	800272c <xTaskRemoveFromEventList>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001e4a:	f000 fd97 	bl	800297c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	dce9      	bgt.n	8001e32 <prvUnlockQueue+0x16>
 8001e5e:	e000      	b.n	8001e62 <prvUnlockQueue+0x46>
                    break;
 8001e60:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	22ff      	movs	r2, #255	; 0xff
 8001e66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001e6a:	f000 ffd7 	bl	8002e1c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001e6e:	f000 ffbb 	bl	8002de8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e78:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001e7a:	e011      	b.n	8001ea0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d012      	beq.n	8001eaa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3310      	adds	r3, #16
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 fc4f 	bl	800272c <xTaskRemoveFromEventList>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001e94:	f000 fd72 	bl	800297c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001e98:	7bbb      	ldrb	r3, [r7, #14]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001ea0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	dce9      	bgt.n	8001e7c <prvUnlockQueue+0x60>
 8001ea8:	e000      	b.n	8001eac <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001eaa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	22ff      	movs	r2, #255	; 0xff
 8001eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001eb4:	f000 ffb2 	bl	8002e1c <vPortExitCritical>
}
 8001eb8:	bf00      	nop
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001ec8:	f000 ff8e 	bl	8002de8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d102      	bne.n	8001eda <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	e001      	b.n	8001ede <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001ede:	f000 ff9d 	bl	8002e1c <vPortExitCritical>

    return xReturn;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001ef4:	f000 ff78 	bl	8002de8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d102      	bne.n	8001f0a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001f04:	2301      	movs	r3, #1
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	e001      	b.n	8001f0e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001f0e:	f000 ff85 	bl	8002e1c <vPortExitCritical>

    return xReturn;
 8001f12:	68fb      	ldr	r3, [r7, #12]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08c      	sub	sp, #48	; 0x30
 8001f20:	af04      	add	r7, sp, #16
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 ffa7 	bl	8002e84 <pvPortMalloc>
 8001f36:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d013      	beq.n	8001f66 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001f3e:	205c      	movs	r0, #92	; 0x5c
 8001f40:	f000 ffa0 	bl	8002e84 <pvPortMalloc>
 8001f44:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d008      	beq.n	8001f5e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001f4c:	225c      	movs	r2, #92	; 0x5c
 8001f4e:	2100      	movs	r1, #0
 8001f50:	69f8      	ldr	r0, [r7, #28]
 8001f52:	f000 fff2 	bl	8002f3a <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f5c:	e005      	b.n	8001f6a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001f5e:	6978      	ldr	r0, [r7, #20]
 8001f60:	f000 ffe2 	bl	8002f28 <vPortFree>
 8001f64:	e001      	b.n	8001f6a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d013      	beq.n	8001f98 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001f70:	88fa      	ldrh	r2, [r7, #6]
 8001f72:	2300      	movs	r3, #0
 8001f74:	9303      	str	r3, [sp, #12]
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	9302      	str	r3, [sp, #8]
 8001f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7c:	9301      	str	r3, [sp, #4]
 8001f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	68b9      	ldr	r1, [r7, #8]
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 f80e 	bl	8001fa8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001f8c:	69f8      	ldr	r0, [r7, #28]
 8001f8e:	f000 f87b 	bl	8002088 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001f92:	2301      	movs	r3, #1
 8001f94:	61bb      	str	r3, [r7, #24]
 8001f96:	e002      	b.n	8001f9e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001f98:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001f9e:	69bb      	ldr	r3, [r7, #24]
    }
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3720      	adds	r7, #32
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
 8001fb4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	21a5      	movs	r1, #165	; 0xa5
 8001fc2:	f000 ffba 	bl	8002f3a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	f023 0307 	bic.w	r3, r3, #7
 8001fde:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d01e      	beq.n	8002024 <prvInitialiseNewTask+0x7c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	e012      	b.n	8002012 <prvInitialiseNewTask+0x6a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	7819      	ldrb	r1, [r3, #0]
 8001ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3334      	adds	r3, #52	; 0x34
 8001ffc:	460a      	mov	r2, r1
 8001ffe:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	4413      	add	r3, r2
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d006      	beq.n	800201a <prvInitialiseNewTask+0x72>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	3301      	adds	r3, #1
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2b0f      	cmp	r3, #15
 8002016:	d9e9      	bls.n	8001fec <prvInitialiseNewTask+0x44>
 8002018:	e000      	b.n	800201c <prvInitialiseNewTask+0x74>
            {
                break;
 800201a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800201c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	2b04      	cmp	r3, #4
 8002028:	d901      	bls.n	800202e <prvInitialiseNewTask+0x86>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800202a:	2304      	movs	r3, #4
 800202c:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800202e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002030:	6a3a      	ldr	r2, [r7, #32]
 8002032:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002036:	6a3a      	ldr	r2, [r7, #32]
 8002038:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800203a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203c:	3304      	adds	r3, #4
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fbcd 	bl	80017de <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002046:	3318      	adds	r3, #24
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fbc8 	bl	80017de <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800204e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002050:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002052:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002054:	6a3b      	ldr	r3, [r7, #32]
 8002056:	f1c3 0205 	rsb	r2, r3, #5
 800205a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800205e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002062:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	68f9      	ldr	r1, [r7, #12]
 8002068:	6938      	ldr	r0, [r7, #16]
 800206a:	f000 fe45 	bl	8002cf8 <pxPortInitialiseStack>
 800206e:	4602      	mov	r2, r0
 8002070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002072:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	2b00      	cmp	r3, #0
 8002078:	d002      	beq.n	8002080 <prvInitialiseNewTask+0xd8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800207e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002080:	bf00      	nop
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002090:	f000 feaa 	bl	8002de8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002094:	4b40      	ldr	r3, [pc, #256]	; (8002198 <prvAddNewTaskToReadyList+0x110>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	3301      	adds	r3, #1
 800209a:	4a3f      	ldr	r2, [pc, #252]	; (8002198 <prvAddNewTaskToReadyList+0x110>)
 800209c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800209e:	4b3f      	ldr	r3, [pc, #252]	; (800219c <prvAddNewTaskToReadyList+0x114>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80020a6:	4a3d      	ldr	r2, [pc, #244]	; (800219c <prvAddNewTaskToReadyList+0x114>)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80020ac:	4b3a      	ldr	r3, [pc, #232]	; (8002198 <prvAddNewTaskToReadyList+0x110>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d110      	bne.n	80020d6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80020b4:	f000 fc86 	bl	80029c4 <prvInitialiseTaskLists>
 80020b8:	e00d      	b.n	80020d6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80020ba:	4b39      	ldr	r3, [pc, #228]	; (80021a0 <prvAddNewTaskToReadyList+0x118>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d109      	bne.n	80020d6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80020c2:	4b36      	ldr	r3, [pc, #216]	; (800219c <prvAddNewTaskToReadyList+0x114>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d802      	bhi.n	80020d6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80020d0:	4a32      	ldr	r2, [pc, #200]	; (800219c <prvAddNewTaskToReadyList+0x114>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80020d6:	4b33      	ldr	r3, [pc, #204]	; (80021a4 <prvAddNewTaskToReadyList+0x11c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	3301      	adds	r3, #1
 80020dc:	4a31      	ldr	r2, [pc, #196]	; (80021a4 <prvAddNewTaskToReadyList+0x11c>)
 80020de:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80020e0:	4b30      	ldr	r3, [pc, #192]	; (80021a4 <prvAddNewTaskToReadyList+0x11c>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ec:	2201      	movs	r2, #1
 80020ee:	409a      	lsls	r2, r3
 80020f0:	4b2d      	ldr	r3, [pc, #180]	; (80021a8 <prvAddNewTaskToReadyList+0x120>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	4a2c      	ldr	r2, [pc, #176]	; (80021a8 <prvAddNewTaskToReadyList+0x120>)
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020fe:	492b      	ldr	r1, [pc, #172]	; (80021ac <prvAddNewTaskToReadyList+0x124>)
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	3304      	adds	r3, #4
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	609a      	str	r2, [r3, #8]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	3204      	adds	r2, #4
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	1d1a      	adds	r2, r3, #4
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4a1b      	ldr	r2, [pc, #108]	; (80021ac <prvAddNewTaskToReadyList+0x124>)
 800213e:	441a      	add	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	615a      	str	r2, [r3, #20]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002148:	4918      	ldr	r1, [pc, #96]	; (80021ac <prvAddNewTaskToReadyList+0x124>)
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	1c59      	adds	r1, r3, #1
 8002158:	4814      	ldr	r0, [pc, #80]	; (80021ac <prvAddNewTaskToReadyList+0x124>)
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4403      	add	r3, r0
 8002164:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002166:	f000 fe59 	bl	8002e1c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800216a:	4b0d      	ldr	r3, [pc, #52]	; (80021a0 <prvAddNewTaskToReadyList+0x118>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00e      	beq.n	8002190 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002172:	4b0a      	ldr	r3, [pc, #40]	; (800219c <prvAddNewTaskToReadyList+0x114>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	429a      	cmp	r2, r3
 800217e:	d207      	bcs.n	8002190 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002180:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <prvAddNewTaskToReadyList+0x128>)
 8002182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002190:	bf00      	nop
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000164 	.word	0x20000164
 800219c:	2000008c 	.word	0x2000008c
 80021a0:	20000170 	.word	0x20000170
 80021a4:	20000180 	.word	0x20000180
 80021a8:	2000016c 	.word	0x2000016c
 80021ac:	20000090 	.word	0x20000090
 80021b0:	e000ed04 	.word	0xe000ed04

080021b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d008      	beq.n	80021d8 <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 80021c6:	f000 f855 	bl	8002274 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80021ca:	2100      	movs	r1, #0
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 fd13 	bl	8002bf8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80021d2:	f000 f85d 	bl	8002290 <xTaskResumeAll>
 80021d6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d107      	bne.n	80021ee <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <vTaskDelay+0x44>)
 80021e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	f3bf 8f4f 	dsb	sy
 80021ea:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	e000ed04 	.word	0xe000ed04

080021fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002202:	4b15      	ldr	r3, [pc, #84]	; (8002258 <vTaskStartScheduler+0x5c>)
 8002204:	9301      	str	r3, [sp, #4]
 8002206:	2300      	movs	r3, #0
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	2300      	movs	r3, #0
 800220c:	2278      	movs	r2, #120	; 0x78
 800220e:	4913      	ldr	r1, [pc, #76]	; (800225c <vTaskStartScheduler+0x60>)
 8002210:	4813      	ldr	r0, [pc, #76]	; (8002260 <vTaskStartScheduler+0x64>)
 8002212:	f7ff fe83 	bl	8001f1c <xTaskCreate>
 8002216:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d115      	bne.n	800224a <vTaskStartScheduler+0x4e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800221e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002222:	f383 8811 	msr	BASEPRI, r3
 8002226:	f3bf 8f6f 	isb	sy
 800222a:	f3bf 8f4f 	dsb	sy
 800222e:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002230:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002232:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <vTaskStartScheduler+0x68>)
 8002234:	f04f 32ff 	mov.w	r2, #4294967295
 8002238:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800223a:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <vTaskStartScheduler+0x6c>)
 800223c:	2201      	movs	r2, #1
 800223e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002240:	4b0a      	ldr	r3, [pc, #40]	; (800226c <vTaskStartScheduler+0x70>)
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002246:	f000 fdaf 	bl	8002da8 <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <vTaskStartScheduler+0x74>)
 800224c:	681b      	ldr	r3, [r3, #0]
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000188 	.word	0x20000188
 800225c:	08002fe4 	.word	0x08002fe4
 8002260:	08002995 	.word	0x08002995
 8002264:	20000184 	.word	0x20000184
 8002268:	20000170 	.word	0x20000170
 800226c:	20000168 	.word	0x20000168
 8002270:	2000000c 	.word	0x2000000c

08002274 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <vTaskSuspendAll+0x18>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	3301      	adds	r3, #1
 800227e:	4a03      	ldr	r2, [pc, #12]	; (800228c <vTaskSuspendAll+0x18>)
 8002280:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002282:	bf00      	nop
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	2000018c 	.word	0x2000018c

08002290 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800229e:	f000 fda3 	bl	8002de8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80022a2:	4b68      	ldr	r3, [pc, #416]	; (8002444 <xTaskResumeAll+0x1b4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	4a66      	ldr	r2, [pc, #408]	; (8002444 <xTaskResumeAll+0x1b4>)
 80022aa:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022ac:	4b65      	ldr	r3, [pc, #404]	; (8002444 <xTaskResumeAll+0x1b4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f040 80c0 	bne.w	8002436 <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80022b6:	4b64      	ldr	r3, [pc, #400]	; (8002448 <xTaskResumeAll+0x1b8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 80bb 	beq.w	8002436 <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80022c0:	e08a      	b.n	80023d8 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022c2:	4b62      	ldr	r3, [pc, #392]	; (800244c <xTaskResumeAll+0x1bc>)
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	6a12      	ldr	r2, [r2, #32]
 80022d8:	609a      	str	r2, [r3, #8]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	69d2      	ldr	r2, [r2, #28]
 80022e2:	605a      	str	r2, [r3, #4]
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	3318      	adds	r3, #24
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d103      	bne.n	80022f8 <xTaskResumeAll+0x68>
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	6a1a      	ldr	r2, [r3, #32]
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	605a      	str	r2, [r3, #4]
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	2200      	movs	r2, #0
 80022fc:	629a      	str	r2, [r3, #40]	; 0x28
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	1e5a      	subs	r2, r3, #1
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	607b      	str	r3, [r7, #4]
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	68d2      	ldr	r2, [r2, #12]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	6892      	ldr	r2, [r2, #8]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	3304      	adds	r3, #4
 800232a:	429a      	cmp	r2, r3
 800232c:	d103      	bne.n	8002336 <xTaskResumeAll+0xa6>
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2200      	movs	r2, #0
 800233a:	615a      	str	r2, [r3, #20]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	1e5a      	subs	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	2201      	movs	r2, #1
 800234c:	409a      	lsls	r2, r3
 800234e:	4b40      	ldr	r3, [pc, #256]	; (8002450 <xTaskResumeAll+0x1c0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4313      	orrs	r3, r2
 8002354:	4a3e      	ldr	r2, [pc, #248]	; (8002450 <xTaskResumeAll+0x1c0>)
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800235c:	493d      	ldr	r1, [pc, #244]	; (8002454 <xTaskResumeAll+0x1c4>)
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	3304      	adds	r3, #4
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	603b      	str	r3, [r7, #0]
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	60da      	str	r2, [r3, #12]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	3204      	adds	r2, #4
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	1d1a      	adds	r2, r3, #4
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4a2e      	ldr	r2, [pc, #184]	; (8002454 <xTaskResumeAll+0x1c4>)
 800239c:	441a      	add	r2, r3
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	615a      	str	r2, [r3, #20]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a6:	492b      	ldr	r1, [pc, #172]	; (8002454 <xTaskResumeAll+0x1c4>)
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	1c59      	adds	r1, r3, #1
 80023b6:	4827      	ldr	r0, [pc, #156]	; (8002454 <xTaskResumeAll+0x1c4>)
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4403      	add	r3, r0
 80023c2:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c8:	4b23      	ldr	r3, [pc, #140]	; (8002458 <xTaskResumeAll+0x1c8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d302      	bcc.n	80023d8 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 80023d2:	4b22      	ldr	r3, [pc, #136]	; (800245c <xTaskResumeAll+0x1cc>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80023d8:	4b1c      	ldr	r3, [pc, #112]	; (800244c <xTaskResumeAll+0x1bc>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f47f af70 	bne.w	80022c2 <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80023e8:	f000 fb6a 	bl	8002ac0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80023ec:	4b1c      	ldr	r3, [pc, #112]	; (8002460 <xTaskResumeAll+0x1d0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d010      	beq.n	800241a <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80023f8:	f000 f836 	bl	8002468 <xTaskIncrementTick>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 8002402:	4b16      	ldr	r3, [pc, #88]	; (800245c <xTaskResumeAll+0x1cc>)
 8002404:	2201      	movs	r2, #1
 8002406:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	3b01      	subs	r3, #1
 800240c:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1f1      	bne.n	80023f8 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 8002414:	4b12      	ldr	r3, [pc, #72]	; (8002460 <xTaskResumeAll+0x1d0>)
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800241a:	4b10      	ldr	r3, [pc, #64]	; (800245c <xTaskResumeAll+0x1cc>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d009      	beq.n	8002436 <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002422:	2301      	movs	r3, #1
 8002424:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002426:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <xTaskResumeAll+0x1d4>)
 8002428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	f3bf 8f4f 	dsb	sy
 8002432:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002436:	f000 fcf1 	bl	8002e1c <vPortExitCritical>

    return xAlreadyYielded;
 800243a:	693b      	ldr	r3, [r7, #16]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	2000018c 	.word	0x2000018c
 8002448:	20000164 	.word	0x20000164
 800244c:	20000124 	.word	0x20000124
 8002450:	2000016c 	.word	0x2000016c
 8002454:	20000090 	.word	0x20000090
 8002458:	2000008c 	.word	0x2000008c
 800245c:	20000178 	.word	0x20000178
 8002460:	20000174 	.word	0x20000174
 8002464:	e000ed04 	.word	0xe000ed04

08002468 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002472:	4b75      	ldr	r3, [pc, #468]	; (8002648 <xTaskIncrementTick+0x1e0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f040 80dc 	bne.w	8002634 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800247c:	4b73      	ldr	r3, [pc, #460]	; (800264c <xTaskIncrementTick+0x1e4>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	3301      	adds	r3, #1
 8002482:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002484:	4a71      	ldr	r2, [pc, #452]	; (800264c <xTaskIncrementTick+0x1e4>)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d110      	bne.n	80024b2 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002490:	4b6f      	ldr	r3, [pc, #444]	; (8002650 <xTaskIncrementTick+0x1e8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	4b6f      	ldr	r3, [pc, #444]	; (8002654 <xTaskIncrementTick+0x1ec>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a6d      	ldr	r2, [pc, #436]	; (8002650 <xTaskIncrementTick+0x1e8>)
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	4a6d      	ldr	r2, [pc, #436]	; (8002654 <xTaskIncrementTick+0x1ec>)
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	4b6c      	ldr	r3, [pc, #432]	; (8002658 <xTaskIncrementTick+0x1f0>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	3301      	adds	r3, #1
 80024aa:	4a6b      	ldr	r2, [pc, #428]	; (8002658 <xTaskIncrementTick+0x1f0>)
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	f000 fb07 	bl	8002ac0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80024b2:	4b6a      	ldr	r3, [pc, #424]	; (800265c <xTaskIncrementTick+0x1f4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	f0c0 80a6 	bcc.w	800260a <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024be:	4b64      	ldr	r3, [pc, #400]	; (8002650 <xTaskIncrementTick+0x1e8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d104      	bne.n	80024d2 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024c8:	4b64      	ldr	r3, [pc, #400]	; (800265c <xTaskIncrementTick+0x1f4>)
 80024ca:	f04f 32ff 	mov.w	r2, #4294967295
 80024ce:	601a      	str	r2, [r3, #0]
                    break;
 80024d0:	e09b      	b.n	800260a <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024d2:	4b5f      	ldr	r3, [pc, #380]	; (8002650 <xTaskIncrementTick+0x1e8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d203      	bcs.n	80024f2 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80024ea:	4a5c      	ldr	r2, [pc, #368]	; (800265c <xTaskIncrementTick+0x1f4>)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80024f0:	e08b      	b.n	800260a <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	68d2      	ldr	r2, [r2, #12]
 8002500:	609a      	str	r2, [r3, #8]
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	6892      	ldr	r2, [r2, #8]
 800250a:	605a      	str	r2, [r3, #4]
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	3304      	adds	r3, #4
 8002514:	429a      	cmp	r2, r3
 8002516:	d103      	bne.n	8002520 <xTaskIncrementTick+0xb8>
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	2200      	movs	r2, #0
 8002524:	615a      	str	r2, [r3, #20]
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	1e5a      	subs	r2, r3, #1
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	2b00      	cmp	r3, #0
 8002536:	d01e      	beq.n	8002576 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253c:	607b      	str	r3, [r7, #4]
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	6a12      	ldr	r2, [r2, #32]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	69d2      	ldr	r2, [r2, #28]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	3318      	adds	r3, #24
 800255a:	429a      	cmp	r2, r3
 800255c:	d103      	bne.n	8002566 <xTaskIncrementTick+0xfe>
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	6a1a      	ldr	r2, [r3, #32]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	2200      	movs	r2, #0
 800256a:	629a      	str	r2, [r3, #40]	; 0x28
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	1e5a      	subs	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257a:	2201      	movs	r2, #1
 800257c:	409a      	lsls	r2, r3
 800257e:	4b38      	ldr	r3, [pc, #224]	; (8002660 <xTaskIncrementTick+0x1f8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4313      	orrs	r3, r2
 8002584:	4a36      	ldr	r2, [pc, #216]	; (8002660 <xTaskIncrementTick+0x1f8>)
 8002586:	6013      	str	r3, [r2, #0]
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800258c:	4935      	ldr	r1, [pc, #212]	; (8002664 <xTaskIncrementTick+0x1fc>)
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	440b      	add	r3, r1
 8002598:	3304      	adds	r3, #4
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	603b      	str	r3, [r7, #0]
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	60da      	str	r2, [r3, #12]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	3204      	adds	r2, #4
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1d1a      	adds	r2, r3, #4
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c2:	4613      	mov	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4a26      	ldr	r2, [pc, #152]	; (8002664 <xTaskIncrementTick+0x1fc>)
 80025cc:	441a      	add	r2, r3
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	615a      	str	r2, [r3, #20]
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d6:	4923      	ldr	r1, [pc, #140]	; (8002664 <xTaskIncrementTick+0x1fc>)
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	1c59      	adds	r1, r3, #1
 80025e6:	481f      	ldr	r0, [pc, #124]	; (8002664 <xTaskIncrementTick+0x1fc>)
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4403      	add	r3, r0
 80025f2:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f8:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <xTaskIncrementTick+0x200>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	429a      	cmp	r2, r3
 8002600:	f67f af5d 	bls.w	80024be <xTaskIncrementTick+0x56>
                        {
                            xSwitchRequired = pdTRUE;
 8002604:	2301      	movs	r3, #1
 8002606:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002608:	e759      	b.n	80024be <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800260a:	4b17      	ldr	r3, [pc, #92]	; (8002668 <xTaskIncrementTick+0x200>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002610:	4914      	ldr	r1, [pc, #80]	; (8002664 <xTaskIncrementTick+0x1fc>)
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d901      	bls.n	8002626 <xTaskIncrementTick+0x1be>
            {
                xSwitchRequired = pdTRUE;
 8002622:	2301      	movs	r3, #1
 8002624:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002626:	4b11      	ldr	r3, [pc, #68]	; (800266c <xTaskIncrementTick+0x204>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d007      	beq.n	800263e <xTaskIncrementTick+0x1d6>
            {
                xSwitchRequired = pdTRUE;
 800262e:	2301      	movs	r3, #1
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	e004      	b.n	800263e <xTaskIncrementTick+0x1d6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002634:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <xTaskIncrementTick+0x208>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	3301      	adds	r3, #1
 800263a:	4a0d      	ldr	r2, [pc, #52]	; (8002670 <xTaskIncrementTick+0x208>)
 800263c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800263e:	69fb      	ldr	r3, [r7, #28]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3720      	adds	r7, #32
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	2000018c 	.word	0x2000018c
 800264c:	20000168 	.word	0x20000168
 8002650:	2000011c 	.word	0x2000011c
 8002654:	20000120 	.word	0x20000120
 8002658:	2000017c 	.word	0x2000017c
 800265c:	20000184 	.word	0x20000184
 8002660:	2000016c 	.word	0x2000016c
 8002664:	20000090 	.word	0x20000090
 8002668:	2000008c 	.word	0x2000008c
 800266c:	20000178 	.word	0x20000178
 8002670:	20000174 	.word	0x20000174

08002674 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800267a:	4b1c      	ldr	r3, [pc, #112]	; (80026ec <vTaskSwitchContext+0x78>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002682:	4b1b      	ldr	r3, [pc, #108]	; (80026f0 <vTaskSwitchContext+0x7c>)
 8002684:	2201      	movs	r2, #1
 8002686:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002688:	e02a      	b.n	80026e0 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 800268a:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <vTaskSwitchContext+0x7c>)
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002690:	4b18      	ldr	r3, [pc, #96]	; (80026f4 <vTaskSwitchContext+0x80>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	fab3 f383 	clz	r3, r3
 800269c:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 800269e:	78fb      	ldrb	r3, [r7, #3]
 80026a0:	f1c3 031f 	rsb	r3, r3, #31
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	4613      	mov	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4a11      	ldr	r2, [pc, #68]	; (80026f8 <vTaskSwitchContext+0x84>)
 80026b2:	4413      	add	r3, r2
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	605a      	str	r2, [r3, #4]
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	3308      	adds	r3, #8
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d104      	bne.n	80026d6 <vTaskSwitchContext+0x62>
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4a07      	ldr	r2, [pc, #28]	; (80026fc <vTaskSwitchContext+0x88>)
 80026de:	6013      	str	r3, [r2, #0]
}
 80026e0:	bf00      	nop
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	2000018c 	.word	0x2000018c
 80026f0:	20000178 	.word	0x20000178
 80026f4:	2000016c 	.word	0x2000016c
 80026f8:	20000090 	.word	0x20000090
 80026fc:	2000008c 	.word	0x2000008c

08002700 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800270a:	4b07      	ldr	r3, [pc, #28]	; (8002728 <vTaskPlaceOnEventList+0x28>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	3318      	adds	r3, #24
 8002710:	4619      	mov	r1, r3
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7ff f86f 	bl	80017f6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002718:	2101      	movs	r1, #1
 800271a:	6838      	ldr	r0, [r7, #0]
 800271c:	f000 fa6c 	bl	8002bf8 <prvAddCurrentTaskToDelayedList>
}
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	2000008c 	.word	0x2000008c

0800272c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800272c:	b480      	push	{r7}
 800272e:	b089      	sub	sp, #36	; 0x24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	6a12      	ldr	r2, [r2, #32]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	69d2      	ldr	r2, [r2, #28]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	3318      	adds	r3, #24
 800275e:	429a      	cmp	r2, r3
 8002760:	d103      	bne.n	800276a <xTaskRemoveFromEventList+0x3e>
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	6a1a      	ldr	r2, [r3, #32]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	2200      	movs	r2, #0
 800276e:	629a      	str	r2, [r3, #40]	; 0x28
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	1e5a      	subs	r2, r3, #1
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800277a:	4b4a      	ldr	r3, [pc, #296]	; (80028a4 <xTaskRemoveFromEventList+0x178>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d15e      	bne.n	8002840 <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	68d2      	ldr	r2, [r2, #12]
 8002790:	609a      	str	r2, [r3, #8]
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	6892      	ldr	r2, [r2, #8]
 800279a:	605a      	str	r2, [r3, #4]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	3304      	adds	r3, #4
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d103      	bne.n	80027b0 <xTaskRemoveFromEventList+0x84>
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	605a      	str	r2, [r3, #4]
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	2200      	movs	r2, #0
 80027b4:	615a      	str	r2, [r3, #20]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	1e5a      	subs	r2, r3, #1
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	2201      	movs	r2, #1
 80027c6:	409a      	lsls	r2, r3
 80027c8:	4b37      	ldr	r3, [pc, #220]	; (80028a8 <xTaskRemoveFromEventList+0x17c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	4a36      	ldr	r2, [pc, #216]	; (80028a8 <xTaskRemoveFromEventList+0x17c>)
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d6:	4935      	ldr	r1, [pc, #212]	; (80028ac <xTaskRemoveFromEventList+0x180>)
 80027d8:	4613      	mov	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	3304      	adds	r3, #4
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	609a      	str	r2, [r3, #8]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	3204      	adds	r2, #4
 80027fe:	605a      	str	r2, [r3, #4]
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	1d1a      	adds	r2, r3, #4
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4a25      	ldr	r2, [pc, #148]	; (80028ac <xTaskRemoveFromEventList+0x180>)
 8002816:	441a      	add	r2, r3
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	615a      	str	r2, [r3, #20]
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002820:	4922      	ldr	r1, [pc, #136]	; (80028ac <xTaskRemoveFromEventList+0x180>)
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	1c59      	adds	r1, r3, #1
 8002830:	481e      	ldr	r0, [pc, #120]	; (80028ac <xTaskRemoveFromEventList+0x180>)
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4403      	add	r3, r0
 800283c:	6019      	str	r1, [r3, #0]
 800283e:	e01b      	b.n	8002878 <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002840:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <xTaskRemoveFromEventList+0x184>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	61da      	str	r2, [r3, #28]
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	621a      	str	r2, [r3, #32]
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	3218      	adds	r2, #24
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	f103 0218 	add.w	r2, r3, #24
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	4a11      	ldr	r2, [pc, #68]	; (80028b0 <xTaskRemoveFromEventList+0x184>)
 800286c:	629a      	str	r2, [r3, #40]	; 0x28
 800286e:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <xTaskRemoveFromEventList+0x184>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	3301      	adds	r3, #1
 8002874:	4a0e      	ldr	r2, [pc, #56]	; (80028b0 <xTaskRemoveFromEventList+0x184>)
 8002876:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800287c:	4b0d      	ldr	r3, [pc, #52]	; (80028b4 <xTaskRemoveFromEventList+0x188>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002882:	429a      	cmp	r2, r3
 8002884:	d905      	bls.n	8002892 <xTaskRemoveFromEventList+0x166>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002886:	2301      	movs	r3, #1
 8002888:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800288a:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <xTaskRemoveFromEventList+0x18c>)
 800288c:	2201      	movs	r2, #1
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	e001      	b.n	8002896 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        xReturn = pdFALSE;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8002896:	69fb      	ldr	r3, [r7, #28]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3724      	adds	r7, #36	; 0x24
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	2000018c 	.word	0x2000018c
 80028a8:	2000016c 	.word	0x2000016c
 80028ac:	20000090 	.word	0x20000090
 80028b0:	20000124 	.word	0x20000124
 80028b4:	2000008c 	.word	0x2000008c
 80028b8:	20000178 	.word	0x20000178

080028bc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80028c4:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <vTaskInternalSetTimeOutState+0x24>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80028cc:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <vTaskInternalSetTimeOutState+0x28>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	605a      	str	r2, [r3, #4]
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	2000017c 	.word	0x2000017c
 80028e4:	20000168 	.word	0x20000168

080028e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 80028f2:	f000 fa79 	bl	8002de8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80028f6:	4b1f      	ldr	r3, [pc, #124]	; (8002974 <xTaskCheckForTimeOut+0x8c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290e:	d102      	bne.n	8002916 <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	e026      	b.n	8002964 <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	4b17      	ldr	r3, [pc, #92]	; (8002978 <xTaskCheckForTimeOut+0x90>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d00a      	beq.n	8002938 <xTaskCheckForTimeOut+0x50>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	429a      	cmp	r2, r3
 800292a:	d305      	bcc.n	8002938 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800292c:	2301      	movs	r3, #1
 800292e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	e015      	b.n	8002964 <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	429a      	cmp	r2, r3
 8002940:	d20b      	bcs.n	800295a <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1ad2      	subs	r2, r2, r3
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7ff ffb4 	bl	80028bc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	e004      	b.n	8002964 <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002960:	2301      	movs	r3, #1
 8002962:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8002964:	f000 fa5a 	bl	8002e1c <vPortExitCritical>

    return xReturn;
 8002968:	697b      	ldr	r3, [r7, #20]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000168 	.word	0x20000168
 8002978:	2000017c 	.word	0x2000017c

0800297c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002980:	4b03      	ldr	r3, [pc, #12]	; (8002990 <vTaskMissedYield+0x14>)
 8002982:	2201      	movs	r2, #1
 8002984:	601a      	str	r2, [r3, #0]
}
 8002986:	bf00      	nop
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	20000178 	.word	0x20000178

08002994 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800299c:	f000 f852 	bl	8002a44 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80029a0:	4b06      	ldr	r3, [pc, #24]	; (80029bc <prvIdleTask+0x28>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d9f9      	bls.n	800299c <prvIdleTask+0x8>
            {
                taskYIELD();
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <prvIdleTask+0x2c>)
 80029aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	f3bf 8f4f 	dsb	sy
 80029b4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80029b8:	e7f0      	b.n	800299c <prvIdleTask+0x8>
 80029ba:	bf00      	nop
 80029bc:	20000090 	.word	0x20000090
 80029c0:	e000ed04 	.word	0xe000ed04

080029c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80029ca:	2300      	movs	r3, #0
 80029cc:	607b      	str	r3, [r7, #4]
 80029ce:	e00c      	b.n	80029ea <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4a12      	ldr	r2, [pc, #72]	; (8002a24 <prvInitialiseTaskLists+0x60>)
 80029dc:	4413      	add	r3, r2
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fe fede 	bl	80017a0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3301      	adds	r3, #1
 80029e8:	607b      	str	r3, [r7, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b04      	cmp	r3, #4
 80029ee:	d9ef      	bls.n	80029d0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80029f0:	480d      	ldr	r0, [pc, #52]	; (8002a28 <prvInitialiseTaskLists+0x64>)
 80029f2:	f7fe fed5 	bl	80017a0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80029f6:	480d      	ldr	r0, [pc, #52]	; (8002a2c <prvInitialiseTaskLists+0x68>)
 80029f8:	f7fe fed2 	bl	80017a0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80029fc:	480c      	ldr	r0, [pc, #48]	; (8002a30 <prvInitialiseTaskLists+0x6c>)
 80029fe:	f7fe fecf 	bl	80017a0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002a02:	480c      	ldr	r0, [pc, #48]	; (8002a34 <prvInitialiseTaskLists+0x70>)
 8002a04:	f7fe fecc 	bl	80017a0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002a08:	480b      	ldr	r0, [pc, #44]	; (8002a38 <prvInitialiseTaskLists+0x74>)
 8002a0a:	f7fe fec9 	bl	80017a0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002a0e:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <prvInitialiseTaskLists+0x78>)
 8002a10:	4a05      	ldr	r2, [pc, #20]	; (8002a28 <prvInitialiseTaskLists+0x64>)
 8002a12:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002a14:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <prvInitialiseTaskLists+0x7c>)
 8002a16:	4a05      	ldr	r2, [pc, #20]	; (8002a2c <prvInitialiseTaskLists+0x68>)
 8002a18:	601a      	str	r2, [r3, #0]
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000090 	.word	0x20000090
 8002a28:	200000f4 	.word	0x200000f4
 8002a2c:	20000108 	.word	0x20000108
 8002a30:	20000124 	.word	0x20000124
 8002a34:	20000138 	.word	0x20000138
 8002a38:	20000150 	.word	0x20000150
 8002a3c:	2000011c 	.word	0x2000011c
 8002a40:	20000120 	.word	0x20000120

08002a44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a4a:	e019      	b.n	8002a80 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002a4c:	f000 f9cc 	bl	8002de8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a50:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <prvCheckTasksWaitingTermination+0x50>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3304      	adds	r3, #4
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fe ff02 	bl	8001866 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002a62:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <prvCheckTasksWaitingTermination+0x54>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	4a0b      	ldr	r2, [pc, #44]	; (8002a98 <prvCheckTasksWaitingTermination+0x54>)
 8002a6a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <prvCheckTasksWaitingTermination+0x58>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	3b01      	subs	r3, #1
 8002a72:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <prvCheckTasksWaitingTermination+0x58>)
 8002a74:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002a76:	f000 f9d1 	bl	8002e1c <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f810 	bl	8002aa0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <prvCheckTasksWaitingTermination+0x58>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1e1      	bne.n	8002a4c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002a88:	bf00      	nop
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000138 	.word	0x20000138
 8002a98:	20000164 	.word	0x20000164
 8002a9c:	2000014c 	.word	0x2000014c

08002aa0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fa3b 	bl	8002f28 <vPortFree>
            vPortFree( pxTCB );
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 fa38 	bl	8002f28 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002ab8:	bf00      	nop
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ac4:	4b09      	ldr	r3, [pc, #36]	; (8002aec <prvResetNextTaskUnblockTime+0x2c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d104      	bne.n	8002ad8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002ace:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <prvResetNextTaskUnblockTime+0x30>)
 8002ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002ad6:	e005      	b.n	8002ae4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ad8:	4b04      	ldr	r3, [pc, #16]	; (8002aec <prvResetNextTaskUnblockTime+0x2c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a03      	ldr	r2, [pc, #12]	; (8002af0 <prvResetNextTaskUnblockTime+0x30>)
 8002ae2:	6013      	str	r3, [r2, #0]
}
 8002ae4:	bf00      	nop
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr
 8002aec:	2000011c 	.word	0x2000011c
 8002af0:	20000184 	.word	0x20000184

08002af4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d06c      	beq.n	8002be4 <xTaskPriorityDisinherit+0xf0>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b0e:	1e5a      	subs	r2, r3, #1
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d061      	beq.n	8002be4 <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d15d      	bne.n	8002be4 <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fe fe9a 	bl	8001866 <uxListRemove>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10a      	bne.n	8002b4e <xTaskPriorityDisinherit+0x5a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43da      	mvns	r2, r3
 8002b44:	4b2a      	ldr	r3, [pc, #168]	; (8002bf0 <xTaskPriorityDisinherit+0xfc>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	4a29      	ldr	r2, [pc, #164]	; (8002bf0 <xTaskPriorityDisinherit+0xfc>)
 8002b4c:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5a:	f1c3 0205 	rsb	r2, r3, #5
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b66:	2201      	movs	r2, #1
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	4b21      	ldr	r3, [pc, #132]	; (8002bf0 <xTaskPriorityDisinherit+0xfc>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	4a1f      	ldr	r2, [pc, #124]	; (8002bf0 <xTaskPriorityDisinherit+0xfc>)
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b78:	491e      	ldr	r1, [pc, #120]	; (8002bf4 <xTaskPriorityDisinherit+0x100>)
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	3304      	adds	r3, #4
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	60da      	str	r2, [r3, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	3204      	adds	r2, #4
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1d1a      	adds	r2, r3, #4
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	609a      	str	r2, [r3, #8]
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bae:	4613      	mov	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4a0f      	ldr	r2, [pc, #60]	; (8002bf4 <xTaskPriorityDisinherit+0x100>)
 8002bb8:	441a      	add	r2, r3
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	615a      	str	r2, [r3, #20]
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc2:	490c      	ldr	r1, [pc, #48]	; (8002bf4 <xTaskPriorityDisinherit+0x100>)
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	1c59      	adds	r1, r3, #1
 8002bd2:	4808      	ldr	r0, [pc, #32]	; (8002bf4 <xTaskPriorityDisinherit+0x100>)
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4403      	add	r3, r0
 8002bde:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002be0:	2301      	movs	r3, #1
 8002be2:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002be4:	697b      	ldr	r3, [r7, #20]
    }
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	2000016c 	.word	0x2000016c
 8002bf4:	20000090 	.word	0x20000090

08002bf8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002c02:	4b36      	ldr	r3, [pc, #216]	; (8002cdc <prvAddCurrentTaskToDelayedList+0xe4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c08:	4b35      	ldr	r3, [pc, #212]	; (8002ce0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe fe29 	bl	8001866 <uxListRemove>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10b      	bne.n	8002c32 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002c1a:	4b31      	ldr	r3, [pc, #196]	; (8002ce0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c20:	2201      	movs	r2, #1
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43da      	mvns	r2, r3
 8002c28:	4b2e      	ldr	r3, [pc, #184]	; (8002ce4 <prvAddCurrentTaskToDelayedList+0xec>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	4a2d      	ldr	r2, [pc, #180]	; (8002ce4 <prvAddCurrentTaskToDelayedList+0xec>)
 8002c30:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c38:	d124      	bne.n	8002c84 <prvAddCurrentTaskToDelayedList+0x8c>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d021      	beq.n	8002c84 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c40:	4b29      	ldr	r3, [pc, #164]	; (8002ce8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	4b26      	ldr	r3, [pc, #152]	; (8002ce0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	609a      	str	r2, [r3, #8]
 8002c4e:	4b24      	ldr	r3, [pc, #144]	; (8002ce0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	6892      	ldr	r2, [r2, #8]
 8002c56:	60da      	str	r2, [r3, #12]
 8002c58:	4b21      	ldr	r3, [pc, #132]	; (8002ce0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	3204      	adds	r2, #4
 8002c62:	605a      	str	r2, [r3, #4]
 8002c64:	4b1e      	ldr	r3, [pc, #120]	; (8002ce0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	1d1a      	adds	r2, r3, #4
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	609a      	str	r2, [r3, #8]
 8002c6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ce0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a1d      	ldr	r2, [pc, #116]	; (8002ce8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002c74:	615a      	str	r2, [r3, #20]
 8002c76:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	4a1a      	ldr	r2, [pc, #104]	; (8002ce8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002c82:	e026      	b.n	8002cd2 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4413      	add	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002c8c:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d209      	bcs.n	8002cb0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c9c:	4b13      	ldr	r3, [pc, #76]	; (8002cec <prvAddCurrentTaskToDelayedList+0xf4>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4610      	mov	r0, r2
 8002caa:	f7fe fda4 	bl	80017f6 <vListInsert>
}
 8002cae:	e010      	b.n	8002cd2 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002cb0:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	3304      	adds	r3, #4
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	f7fe fd9a 	bl	80017f6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002cc2:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d202      	bcs.n	8002cd2 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8002ccc:	4a09      	ldr	r2, [pc, #36]	; (8002cf4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6013      	str	r3, [r2, #0]
}
 8002cd2:	bf00      	nop
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20000168 	.word	0x20000168
 8002ce0:	2000008c 	.word	0x2000008c
 8002ce4:	2000016c 	.word	0x2000016c
 8002ce8:	20000150 	.word	0x20000150
 8002cec:	20000120 	.word	0x20000120
 8002cf0:	2000011c 	.word	0x2000011c
 8002cf4:	20000184 	.word	0x20000184

08002cf8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	3b04      	subs	r3, #4
 8002d08:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d10:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	3b04      	subs	r3, #4
 8002d16:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f023 0201 	bic.w	r2, r3, #1
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	3b04      	subs	r3, #4
 8002d26:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002d28:	4a08      	ldr	r2, [pc, #32]	; (8002d4c <pxPortInitialiseStack+0x54>)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	3b14      	subs	r3, #20
 8002d32:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	3b20      	subs	r3, #32
 8002d3e:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002d40:	68fb      	ldr	r3, [r7, #12]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr
 8002d4c:	08002d51 	.word	0x08002d51

08002d50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002d5a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002d5e:	f383 8811 	msr	BASEPRI, r3
 8002d62:	f3bf 8f6f 	isb	sy
 8002d66:	f3bf 8f4f 	dsb	sy
 8002d6a:	607b      	str	r3, [r7, #4]
    }
 8002d6c:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002d6e:	bf00      	nop
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0fc      	beq.n	8002d70 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002d76:	bf00      	nop
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr
	...

08002d84 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8002d84:	4806      	ldr	r0, [pc, #24]	; (8002da0 <prvPortStartFirstTask+0x1c>)
 8002d86:	6800      	ldr	r0, [r0, #0]
 8002d88:	6800      	ldr	r0, [r0, #0]
 8002d8a:	f380 8808 	msr	MSP, r0
 8002d8e:	b662      	cpsie	i
 8002d90:	b661      	cpsie	f
 8002d92:	f3bf 8f4f 	dsb	sy
 8002d96:	f3bf 8f6f 	isb	sy
 8002d9a:	df00      	svc	0
 8002d9c:	bf00      	nop
 8002d9e:	0000      	.short	0x0000
 8002da0:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop

08002da8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
        *pucFirstUserPriorityRegister = ulOriginalPriority;
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002dac:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <xPortStartScheduler+0x38>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a0b      	ldr	r2, [pc, #44]	; (8002de0 <xPortStartScheduler+0x38>)
 8002db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002db6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002db8:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <xPortStartScheduler+0x38>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a08      	ldr	r2, [pc, #32]	; (8002de0 <xPortStartScheduler+0x38>)
 8002dbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dc2:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002dc4:	f000 f844 	bl	8002e50 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002dc8:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <xPortStartScheduler+0x3c>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002dce:	f7ff ffd9 	bl	8002d84 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002dd2:	f7ff fc4f 	bl	8002674 <vTaskSwitchContext>
    prvTaskExitError();
 8002dd6:	f7ff ffbb 	bl	8002d50 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	e000ed20 	.word	0xe000ed20
 8002de4:	20000010 	.word	0x20000010

08002de8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
        __asm volatile
 8002dee:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002df2:	f383 8811 	msr	BASEPRI, r3
 8002df6:	f3bf 8f6f 	isb	sy
 8002dfa:	f3bf 8f4f 	dsb	sy
 8002dfe:	607b      	str	r3, [r7, #4]
    }
 8002e00:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002e02:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <vPortEnterCritical+0x30>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	3301      	adds	r3, #1
 8002e08:	4a03      	ldr	r2, [pc, #12]	; (8002e18 <vPortEnterCritical+0x30>)
 8002e0a:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	20000010 	.word	0x20000010

08002e1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8002e22:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <vPortExitCritical+0x30>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	4a08      	ldr	r2, [pc, #32]	; (8002e4c <vPortExitCritical+0x30>)
 8002e2a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002e2c:	4b07      	ldr	r3, [pc, #28]	; (8002e4c <vPortExitCritical+0x30>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d105      	bne.n	8002e40 <vPortExitCritical+0x24>
 8002e34:	2300      	movs	r3, #0
 8002e36:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002e3e:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	20000010 	.word	0x20000010

08002e50 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002e54:	4b07      	ldr	r3, [pc, #28]	; (8002e74 <vPortSetupTimerInterrupt+0x24>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002e5a:	4b07      	ldr	r3, [pc, #28]	; (8002e78 <vPortSetupTimerInterrupt+0x28>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002e60:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <vPortSetupTimerInterrupt+0x2c>)
 8002e62:	4a07      	ldr	r2, [pc, #28]	; (8002e80 <vPortSetupTimerInterrupt+0x30>)
 8002e64:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002e66:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <vPortSetupTimerInterrupt+0x24>)
 8002e68:	2207      	movs	r2, #7
 8002e6a:	601a      	str	r2, [r3, #0]
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr
 8002e74:	e000e010 	.word	0xe000e010
 8002e78:	e000e018 	.word	0xe000e018
 8002e7c:	e000e014 	.word	0xe000e014
 8002e80:	0001193f 	.word	0x0001193f

08002e84 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00e      	beq.n	8002eb8 <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f023 0307 	bic.w	r3, r3, #7
 8002ea0:	3308      	adds	r3, #8
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d205      	bcs.n	8002eb4 <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f023 0307 	bic.w	r3, r3, #7
 8002eae:	3308      	adds	r3, #8
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	e001      	b.n	8002eb8 <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8002eb8:	f7ff f9dc 	bl	8002274 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8002ebc:	4b17      	ldr	r3, [pc, #92]	; (8002f1c <pvPortMalloc+0x98>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d105      	bne.n	8002ed0 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002ec4:	4b16      	ldr	r3, [pc, #88]	; (8002f20 <pvPortMalloc+0x9c>)
 8002ec6:	f023 0307 	bic.w	r3, r3, #7
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <pvPortMalloc+0x98>)
 8002ece:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d01b      	beq.n	8002f0e <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002ed6:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <pvPortMalloc+0xa0>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8002ede:	f244 72f7 	movw	r2, #18423	; 0x47f7
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d813      	bhi.n	8002f0e <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8002ee6:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <pvPortMalloc+0xa0>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	441a      	add	r2, r3
 8002eee:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <pvPortMalloc+0xa0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d90b      	bls.n	8002f0e <pvPortMalloc+0x8a>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8002ef6:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <pvPortMalloc+0x98>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <pvPortMalloc+0xa0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4413      	add	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8002f02:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <pvPortMalloc+0xa0>)
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4413      	add	r3, r2
 8002f0a:	4a06      	ldr	r2, [pc, #24]	; (8002f24 <pvPortMalloc+0xa0>)
 8002f0c:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002f0e:	f7ff f9bf 	bl	8002290 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8002f12:	68fb      	ldr	r3, [r7, #12]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20004994 	.word	0x20004994
 8002f20:	20000197 	.word	0x20000197
 8002f24:	20004990 	.word	0x20004990

08002f28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr

08002f3a <memset>:
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	4402      	add	r2, r0
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d100      	bne.n	8002f44 <memset+0xa>
 8002f42:	4770      	bx	lr
 8002f44:	f803 1b01 	strb.w	r1, [r3], #1
 8002f48:	e7f9      	b.n	8002f3e <memset+0x4>
	...

08002f4c <__libc_init_array>:
 8002f4c:	b570      	push	{r4, r5, r6, lr}
 8002f4e:	2600      	movs	r6, #0
 8002f50:	4d0c      	ldr	r5, [pc, #48]	; (8002f84 <__libc_init_array+0x38>)
 8002f52:	4c0d      	ldr	r4, [pc, #52]	; (8002f88 <__libc_init_array+0x3c>)
 8002f54:	1b64      	subs	r4, r4, r5
 8002f56:	10a4      	asrs	r4, r4, #2
 8002f58:	42a6      	cmp	r6, r4
 8002f5a:	d109      	bne.n	8002f70 <__libc_init_array+0x24>
 8002f5c:	f000 f828 	bl	8002fb0 <_init>
 8002f60:	2600      	movs	r6, #0
 8002f62:	4d0a      	ldr	r5, [pc, #40]	; (8002f8c <__libc_init_array+0x40>)
 8002f64:	4c0a      	ldr	r4, [pc, #40]	; (8002f90 <__libc_init_array+0x44>)
 8002f66:	1b64      	subs	r4, r4, r5
 8002f68:	10a4      	asrs	r4, r4, #2
 8002f6a:	42a6      	cmp	r6, r4
 8002f6c:	d105      	bne.n	8002f7a <__libc_init_array+0x2e>
 8002f6e:	bd70      	pop	{r4, r5, r6, pc}
 8002f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f74:	4798      	blx	r3
 8002f76:	3601      	adds	r6, #1
 8002f78:	e7ee      	b.n	8002f58 <__libc_init_array+0xc>
 8002f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f7e:	4798      	blx	r3
 8002f80:	3601      	adds	r6, #1
 8002f82:	e7f2      	b.n	8002f6a <__libc_init_array+0x1e>
 8002f84:	08003018 	.word	0x08003018
 8002f88:	08003018 	.word	0x08003018
 8002f8c:	08003018 	.word	0x08003018
 8002f90:	0800301c 	.word	0x0800301c

08002f94 <memcpy>:
 8002f94:	440a      	add	r2, r1
 8002f96:	4291      	cmp	r1, r2
 8002f98:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f9c:	d100      	bne.n	8002fa0 <memcpy+0xc>
 8002f9e:	4770      	bx	lr
 8002fa0:	b510      	push	{r4, lr}
 8002fa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fa6:	4291      	cmp	r1, r2
 8002fa8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fac:	d1f9      	bne.n	8002fa2 <memcpy+0xe>
 8002fae:	bd10      	pop	{r4, pc}

08002fb0 <_init>:
 8002fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb2:	bf00      	nop
 8002fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fb6:	bc08      	pop	{r3}
 8002fb8:	469e      	mov	lr, r3
 8002fba:	4770      	bx	lr

08002fbc <_fini>:
 8002fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fbe:	bf00      	nop
 8002fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fc2:	bc08      	pop	{r3}
 8002fc4:	469e      	mov	lr, r3
 8002fc6:	4770      	bx	lr
